{
    "docs": [
        {
            "location": "/",
            "text": "PySiddhi\n\u00b6\n\n\nPySiddhi\n is a Python wrapper for \nSiddhi\n. Which can listens to events from data streams, detects complex conditions\ndescribed via a \nStreaming SQL language\n, and triggers actions. It performs both \nStream Processing\n and \n\nComplex Event Processing\n on streaming data. Its Siddhi core is written in Java library. \n\n\n\n\nPySiddhi4 wraps \nSiddhi 4\n\n\nPySiddhi4 includes a REST Client for \nWSO2 Stream Processor(SP) 4.x.x\n.\n\n\n\n\nContent\n\u00b6\n\n\n\n\nIntroduction and Quick Demo (this page)\n\n\nInstallation Guide\n\n\nRun PySiddhi4\n\n\nDebug PySiddhi4\n\n\nAdvanced Concepts of PySiddhi\n\n\nUsing PySiddhi REST Client to Manage WSO2 Stream Processor\n\n\nDemo Managing Siddhi Apps on WSO2 SP\n\n\nAPIs to Manage Siddhi App\n\n\nAPIs to Simulate Events\n\n\n\n\n\n\n\n\nInstallation\n\u00b6\n\n\nPySiddhi4 can be installed using pip.\n\n\npip install pysiddhi4\n\n\n\n\n\nFor detail insulation and prerequisite refer section on \nInstallation Guide\n. \n\n\nQuick Demo\n\u00b6\n\n\nFollowing is a quick demo of how to use PySiddhi4. For comprehensive demo please refer \nQuick-Demo-PySiddhi4\n\n\nStep 1\n - Define filter using Siddhi Query.\n\n\nsiddhiManager\n \n=\n \nSiddhiManager\n()\n\n\n# Siddhi Query to filter events with volume less than 150 as output\n\n\nsiddhiApp\n \n=\n \n\"define stream cseEventStream (symbol string, price float, volume long);\"\n \n+\n \\\n            \n\"@info(name = 'query1') \"\n \n+\n \\\n            \n\"from cseEventStream[volume < 150] \"\n \n+\n \\\n            \n\"select symbol, price \"\n \n+\n \\\n            \n\"insert into outputStream;\"\n\n\n\n# Generate runtime\n\n\nsiddhiAppRuntime\n \n=\n \nsiddhiManager\n.\ncreateSiddhiAppRuntime\n(\nsiddhiApp\n)\n\n\n\n\n\n\nFor more details on Siddhi Query Language, refer \nSiddhi Query Language Guide\n.\n\n\nStep 2\n - Define a listener for filtered events.\n\n\n# Add listener to capture output events\n\n\nclass\n \nQueryCallbackImpl\n(\nQueryCallback\n):\n\n    \ndef\n \nreceive\n(\nself\n,\n \ntimestamp\n,\n \ninEvents\n,\n \noutEvents\n):\n\n        \nPrintEvent\n(\ntimestamp\n,\n \ninEvents\n,\n \noutEvents\n)\n\n\nsiddhiAppRuntime\n.\naddCallback\n(\n\"query1\"\n,\nQueryCallbackImpl\n())\n\n\n\n\n\n\nStep 3\n - Test filter query using sample input events.\n\n\n# Retrieving input handler to push events into Siddhi\n\n\ninputHandler\n \n=\n \nsiddhiAppRuntime\n.\ngetInputHandler\n(\n\"cseEventStream\"\n)\n\n\n\n# Starting event processing\n\n\nsiddhiAppRuntime\n.\nstart\n()\n\n\n\n# Sending events to Siddhi\n\n\ninputHandler\n.\nsend\n([\n\"IBM\"\n,\n700.0\n,\nLongType\n(\n100\n)])\n\n\ninputHandler\n.\nsend\n([\n\"WSO2\"\n,\n \n60.5\n,\n \nLongType\n(\n200\n)])\n\n\ninputHandler\n.\nsend\n([\n\"GOOG\"\n,\n \n50\n,\n \nLongType\n(\n30\n)])\n\n\ninputHandler\n.\nsend\n([\n\"IBM\"\n,\n \n76.6\n,\n \nLongType\n(\n400\n)])\n\n\ninputHandler\n.\nsend\n([\n\"WSO2\"\n,\n \n45.6\n,\n \nLongType\n(\n50\n)])\n\n\n\n# Wait for response\n\n\nsleep\n(\n0.1\n)\n\n\n\n\n\n\nOutput\n\n\nThe 3 events with volume less than 150 are printed in log.\n\n\nINFO  EventPrinter - Events{ @timestamp = 1497708406678, inEvents = [Event{timestamp=1497708406678, id=-1, data=[IBM, 700.0], isExpired=false}], RemoveEvents = null }\nINFO  EventPrinter - Events{ @timestamp = 1497708406685, inEvents = [Event{timestamp=1497708406685, id=-1, data=[GOOG, 50], isExpired=false}], RemoveEvents = null }\nINFO  EventPrinter - Events{ @timestamp = 1497708406687, inEvents = [Event{timestamp=1497708406687, id=-1, data=[WSO2, 45.6], isExpired=false}], RemoveEvents = null }\n\n\n\n\n\nClean Up\n - Remember to shutdown the Siddhi Manager when your done.\n\n\nsiddhiManager\n.\nshutdown\n()\n\n\n\n\n\n\nContribution\n\u00b6\n\n\nPySiddhi is initiated by a project for Google Summer of Code 2017 Program.\n\n\nContributed by: \nMadhawa Vidanapathirana\n \n\nEmail: madhawavidanapathirana@gmail.com \n\nOrganization: University of Moratuwa, Sri Lanka.\n\n\nHow to Contribute\n\u00b6\n\n\n\n\nReport issues at \nGitHub Issue Tracker\n.\n\n\nFeel free to try out the \nPySiddhi source code\n and send your contributions as pull requests to the \nmaster branch\n. \n\n\n\n\nContact us\n\u00b6\n\n\n\n\nPost your questions with the \n\"Siddhi\"\n tag in \nStackoverflow\n. \n\n\nFor more details and support contact us via \nhttp://wso2.com/support/\n\n\n\n\nSupport\n\u00b6\n\n\n\n\nWe are committed to ensuring support for \nSiddhi\n (with its \nextensions\n) and \nWSO2 Stream Processor\n from development to production. \n\n\nOur unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology. \n\n\nFor more details and to take advantage of this unique opportunity, contact us via \nhttp://wso2.com/support/\n.",
            "title": "Welcome to PySiddhi"
        },
        {
            "location": "/#pysiddhi",
            "text": "PySiddhi  is a Python wrapper for  Siddhi . Which can listens to events from data streams, detects complex conditions\ndescribed via a  Streaming SQL language , and triggers actions. It performs both  Stream Processing  and  Complex Event Processing  on streaming data. Its Siddhi core is written in Java library.    PySiddhi4 wraps  Siddhi 4  PySiddhi4 includes a REST Client for  WSO2 Stream Processor(SP) 4.x.x .",
            "title": "PySiddhi"
        },
        {
            "location": "/#content",
            "text": "Introduction and Quick Demo (this page)  Installation Guide  Run PySiddhi4  Debug PySiddhi4  Advanced Concepts of PySiddhi  Using PySiddhi REST Client to Manage WSO2 Stream Processor  Demo Managing Siddhi Apps on WSO2 SP  APIs to Manage Siddhi App  APIs to Simulate Events",
            "title": "Content"
        },
        {
            "location": "/#installation",
            "text": "PySiddhi4 can be installed using pip.  pip install pysiddhi4  For detail insulation and prerequisite refer section on  Installation Guide .",
            "title": "Installation"
        },
        {
            "location": "/#quick-demo",
            "text": "Following is a quick demo of how to use PySiddhi4. For comprehensive demo please refer  Quick-Demo-PySiddhi4  Step 1  - Define filter using Siddhi Query.  siddhiManager   =   SiddhiManager ()  # Siddhi Query to filter events with volume less than 150 as output  siddhiApp   =   \"define stream cseEventStream (symbol string, price float, volume long);\"   +  \\\n             \"@info(name = 'query1') \"   +  \\\n             \"from cseEventStream[volume < 150] \"   +  \\\n             \"select symbol, price \"   +  \\\n             \"insert into outputStream;\"  # Generate runtime  siddhiAppRuntime   =   siddhiManager . createSiddhiAppRuntime ( siddhiApp )   For more details on Siddhi Query Language, refer  Siddhi Query Language Guide .  Step 2  - Define a listener for filtered events.  # Add listener to capture output events  class   QueryCallbackImpl ( QueryCallback ): \n     def   receive ( self ,   timestamp ,   inEvents ,   outEvents ): \n         PrintEvent ( timestamp ,   inEvents ,   outEvents )  siddhiAppRuntime . addCallback ( \"query1\" , QueryCallbackImpl ())   Step 3  - Test filter query using sample input events.  # Retrieving input handler to push events into Siddhi  inputHandler   =   siddhiAppRuntime . getInputHandler ( \"cseEventStream\" )  # Starting event processing  siddhiAppRuntime . start ()  # Sending events to Siddhi  inputHandler . send ([ \"IBM\" , 700.0 , LongType ( 100 )])  inputHandler . send ([ \"WSO2\" ,   60.5 ,   LongType ( 200 )])  inputHandler . send ([ \"GOOG\" ,   50 ,   LongType ( 30 )])  inputHandler . send ([ \"IBM\" ,   76.6 ,   LongType ( 400 )])  inputHandler . send ([ \"WSO2\" ,   45.6 ,   LongType ( 50 )])  # Wait for response  sleep ( 0.1 )   Output  The 3 events with volume less than 150 are printed in log.  INFO  EventPrinter - Events{ @timestamp = 1497708406678, inEvents = [Event{timestamp=1497708406678, id=-1, data=[IBM, 700.0], isExpired=false}], RemoveEvents = null }\nINFO  EventPrinter - Events{ @timestamp = 1497708406685, inEvents = [Event{timestamp=1497708406685, id=-1, data=[GOOG, 50], isExpired=false}], RemoveEvents = null }\nINFO  EventPrinter - Events{ @timestamp = 1497708406687, inEvents = [Event{timestamp=1497708406687, id=-1, data=[WSO2, 45.6], isExpired=false}], RemoveEvents = null }  Clean Up  - Remember to shutdown the Siddhi Manager when your done.  siddhiManager . shutdown ()",
            "title": "Quick Demo"
        },
        {
            "location": "/#contribution",
            "text": "PySiddhi is initiated by a project for Google Summer of Code 2017 Program.  Contributed by:  Madhawa Vidanapathirana   \nEmail: madhawavidanapathirana@gmail.com  \nOrganization: University of Moratuwa, Sri Lanka.",
            "title": "Contribution"
        },
        {
            "location": "/#how-to-contribute",
            "text": "Report issues at  GitHub Issue Tracker .  Feel free to try out the  PySiddhi source code  and send your contributions as pull requests to the  master branch .",
            "title": "How to Contribute"
        },
        {
            "location": "/#contact-us",
            "text": "Post your questions with the  \"Siddhi\"  tag in  Stackoverflow .   For more details and support contact us via  http://wso2.com/support/",
            "title": "Contact us"
        },
        {
            "location": "/#support",
            "text": "We are committed to ensuring support for  Siddhi  (with its  extensions ) and  WSO2 Stream Processor  from development to production.   Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.   For more details and to take advantage of this unique opportunity, contact us via  http://wso2.com/support/ .",
            "title": "Support"
        },
        {
            "location": "/license/",
            "text": "Copyright (c) 2018 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS",
            "title": "License"
        },
        {
            "location": "/Installation-Guide/",
            "text": "Installation Guide\n\u00b6\n\n\nThe current version is tested with Microsoft Windows and Unix/Linux based operating systems. \nPySiddhi4 can be installed using one of the following methods.\n\n\nInstall PySiddhi4\n\u00b6\n\n\nPrerequisites\n\u00b6\n\n\n\n\n\n\nThe following dependencies should be installed prior to installation of library.\n\n\nLinux\n\n\n\n\nPython 2.7 or 3.x\n\n\nCython \n \nsudo pip install cython\n\n\nPython Developer Package \n \nsudo apt-get install python-dev python3-dev python-dev\n\n\nOracle Java 8 and set JAVA_HOME path\n\n\nlibboost for Python \n(Only to build from Source)\n \nsudo apt-get install libboost-python-dev\n \n\n\nMaven \n(Only to build from Source)\n\n\ng++ and other development tools \n(Only to build from Source)\n \n\n            \nsudo apt-get install build-essential g++ autotools-dev libicu-dev build-essential libbz2-dev libboost-all-dev\n\n\n\n\nmacOS\n\n\n\n\nInstall brew\n\n\nInstall python using brew\n\n\nCython \n \nsudo pip install cython\n\n\nOracle Java 8 and set JAVA_HOME path\n\n\nboost for python \n(Only to build from Source)\n \n \nbrew install boost\n\n\nMaven \n(Only to build from Source)\n\n\n\n\nWindows\n\n\n\n\nInstall Python \n\n\nCython \nsudo pip install cython\n\n\nOracle Java 8 and set JAVA_HOME path\n\n\nInstall Visual Studio Build tools \n(Only to build from Source)\n\n\nMaven \n(Only to build from Source)\n\n\n\n\n\n\n\n\nDownload siddhi-sdk release from \nhere\n and set the SIDDHISDK_HOME as an environment variable. \n \nexport SIDDHISDK_HOME=\"<path-to-siddhi-sdk>\"\n\n\n\n\nDownload siddhi-python-api-proxy-4-1.0.0.jar from \nhere\n and copy to \n<SIDDHISDK_HOME>/lib\n directory\n\n\n\n\nInstall PySiddhi4 via Python Package Management\n\u00b6\n\n\nPySiddhi4 can be installed via PIP command as bellow.\n\n\npip install pysiddhi4\n\n\n\n\n\nInstall PySiddhi4 from Online Code\n\u00b6\n\n\nUsing the following PIP command, PySiddhi4 can be directly installed from online code available in GitHub.\n\n\npip install git+https://github.com/wso2/PySiddhi.git\n\n\n\n\n\nNote: In case of permission errors, use \nsudo\n\n\nInstall from Downloaded Code\n\u00b6\n\n\nSwitch to the branch \nmaster\n of PySiddhi4.\nNavigate to source code root directory and execute the following PIP command.\n\n\npip install .\n\n\n\n\n\nNote the period (.) at end of command. In case of permission errors, use \nsudo\n\n\nUninstall PySiddhi4\n\u00b6\n\n\nIf the library has been installed as explained above, it could be uninstalled using the following pip command.\n\n\npip uninstall pysiddhi4",
            "title": "Installation Guide"
        },
        {
            "location": "/Installation-Guide/#installation-guide",
            "text": "The current version is tested with Microsoft Windows and Unix/Linux based operating systems. \nPySiddhi4 can be installed using one of the following methods.",
            "title": "Installation Guide"
        },
        {
            "location": "/Installation-Guide/#install-pysiddhi4",
            "text": "",
            "title": "Install PySiddhi4"
        },
        {
            "location": "/Installation-Guide/#prerequisites",
            "text": "The following dependencies should be installed prior to installation of library.  Linux   Python 2.7 or 3.x  Cython    sudo pip install cython  Python Developer Package    sudo apt-get install python-dev python3-dev python-dev  Oracle Java 8 and set JAVA_HOME path  libboost for Python  (Only to build from Source)   sudo apt-get install libboost-python-dev    Maven  (Only to build from Source)  g++ and other development tools  (Only to build from Source)   \n             sudo apt-get install build-essential g++ autotools-dev libicu-dev build-essential libbz2-dev libboost-all-dev   macOS   Install brew  Install python using brew  Cython    sudo pip install cython  Oracle Java 8 and set JAVA_HOME path  boost for python  (Only to build from Source)     brew install boost  Maven  (Only to build from Source)   Windows   Install Python   Cython  sudo pip install cython  Oracle Java 8 and set JAVA_HOME path  Install Visual Studio Build tools  (Only to build from Source)  Maven  (Only to build from Source)     Download siddhi-sdk release from  here  and set the SIDDHISDK_HOME as an environment variable.    export SIDDHISDK_HOME=\"<path-to-siddhi-sdk>\"   Download siddhi-python-api-proxy-4-1.0.0.jar from  here  and copy to  <SIDDHISDK_HOME>/lib  directory",
            "title": "Prerequisites"
        },
        {
            "location": "/Installation-Guide/#install-pysiddhi4-via-python-package-management",
            "text": "PySiddhi4 can be installed via PIP command as bellow.  pip install pysiddhi4",
            "title": "Install PySiddhi4 via Python Package Management"
        },
        {
            "location": "/Installation-Guide/#install-pysiddhi4-from-online-code",
            "text": "Using the following PIP command, PySiddhi4 can be directly installed from online code available in GitHub.  pip install git+https://github.com/wso2/PySiddhi.git  Note: In case of permission errors, use  sudo",
            "title": "Install PySiddhi4 from Online Code"
        },
        {
            "location": "/Installation-Guide/#install-from-downloaded-code",
            "text": "Switch to the branch  master  of PySiddhi4.\nNavigate to source code root directory and execute the following PIP command.  pip install .  Note the period (.) at end of command. In case of permission errors, use  sudo",
            "title": "Install from Downloaded Code"
        },
        {
            "location": "/Installation-Guide/#uninstall-pysiddhi4",
            "text": "If the library has been installed as explained above, it could be uninstalled using the following pip command.  pip uninstall pysiddhi4",
            "title": "Uninstall PySiddhi4"
        },
        {
            "location": "/Run-PySiddhi4/",
            "text": "Run PySiddhi4\n\u00b6\n\n\nThe following is a sample demonstrating how to rung PySiddhi4. \n\n\nSample\n\u00b6\n\n\nThis sample demonstrating how to write a streaming query to detect stock records having volume less than 150. \nThis code uses Siddhi 4.0 queries with PySiddhi4.\n\n\nfrom\n \nPySiddhi4.DataTypes.LongType\n \nimport\n \nLongType\n\n\nfrom\n \nPySiddhi4.core.SiddhiManager\n \nimport\n \nSiddhiManager\n\n\nfrom\n \nPySiddhi4.core.query.output.callback.QueryCallback\n \nimport\n \nQueryCallback\n\n\nfrom\n \nPySiddhi4.core.util.EventPrinter\n \nimport\n \nPrintEvent\n\n\nfrom\n \ntime\n \nimport\n \nsleep\n\n\n\nsiddhiManager\n \n=\n \nSiddhiManager\n()\n\n\n# Siddhi Query to filter events with volume less than 150 as output\n\n\nsiddhiApp\n \n=\n \n\"define stream cseEventStream (symbol string, price float, volume long); \"\n \n+\n \\\n\n\"@info(name = 'query1') from cseEventStream[volume < 150] select symbol,price insert into outputStream;\"\n\n\n\n# Generate runtime\n\n\nsiddhiAppRuntime\n \n=\n \nsiddhiManager\n.\ncreateSiddhiAppRuntime\n(\nsiddhiApp\n)\n\n\n\n# Add listener to capture output events\n\n\nclass\n \nQueryCallbackImpl\n(\nQueryCallback\n):\n\n    \ndef\n \nreceive\n(\nself\n,\n \ntimestamp\n,\n \ninEvents\n,\n \noutEvents\n):\n\n        \nPrintEvent\n(\ntimestamp\n,\n \ninEvents\n,\n \noutEvents\n)\n\n\nsiddhiAppRuntime\n.\naddCallback\n(\n\"query1\"\n,\nQueryCallbackImpl\n())\n\n\n\n# Retrieving input handler to push events into Siddhi\n\n\ninputHandler\n \n=\n \nsiddhiAppRuntime\n.\ngetInputHandler\n(\n\"cseEventStream\"\n)\n\n\n\n# Starting event processing\n\n\nsiddhiAppRuntime\n.\nstart\n()\n\n\n\n# Sending events to Siddhi\n\n\ninputHandler\n.\nsend\n([\n\"IBM\"\n,\n700.0\n,\nLongType\n(\n100\n)])\n\n\ninputHandler\n.\nsend\n([\n\"WSO2\"\n,\n \n60.5\n,\n \nLongType\n(\n200\n)])\n\n\ninputHandler\n.\nsend\n([\n\"GOOG\"\n,\n \n50\n,\n \nLongType\n(\n30\n)])\n\n\ninputHandler\n.\nsend\n([\n\"IBM\"\n,\n \n76.6\n,\n \nLongType\n(\n400\n)])\n\n\ninputHandler\n.\nsend\n([\n\"WSO2\"\n,\n \n45.6\n,\n \nLongType\n(\n50\n)])\n\n\n\n# Wait for response\n\n\nsleep\n(\n10\n)\n\n\n\nsiddhiManager\n.\nshutdown\n()\n\n\n\n\n\n\nExplanation\n\u00b6\n\n\nAbove example is comprehensively described bellow:\n\n\nInitialize libraries and imports\n\n\nAdd \nthis file\n to working directory in order to enable log4j \nlogging. Log4j is used by PrintEvent to generate output.\n\n\nfrom\n \nPySiddhi4.DataTypes.LongType\n \nimport\n \nLongType\n\n\nfrom\n \nPySiddhi4.core.SiddhiManager\n \nimport\n \nSiddhiManager\n\n\nfrom\n \nPySiddhi4.core.query.output.callback.QueryCallback\n \nimport\n \nQueryCallback\n\n\nfrom\n \nPySiddhi4.core.util.EventPrinter\n \nimport\n \nPrintEvent\n\n\nfrom\n \ntime\n \nimport\n \nsleep\n\n\n\n\n\n\nDefine filter using Siddhi query\n\n\nsiddhiManager\n \n=\n \nSiddhiManager\n()\n\n\n# Siddhi Query to filter events with volume less than 150 as output\n\n\nsiddhiApp\n \n=\n \n\"define stream cseEventStream (symbol string, price float, volume long); \"\n \n+\n \\\n\n\"@info(name = 'query1') from cseEventStream[volume < 150] select symbol,price insert into outputStream;\"\n\n\n\n# Generate runtime\n\n\nsiddhiAppRuntime\n \n=\n \nsiddhiManager\n.\ncreateSiddhiAppRuntime\n(\nsiddhiApp\n)\n\n\n\n\n\n\nFor more details on Siddhi Query Language, refer \nSiddhi Query Language Guide\n.\n\n\nDefine a listener for filtered events\n\n\n# Add listener to capture output events\n\n\nclass\n \nQueryCallbackImpl\n(\nQueryCallback\n):\n\n    \ndef\n \nreceive\n(\nself\n,\n \ntimestamp\n,\n \ninEvents\n,\n \noutEvents\n):\n\n        \nPrintEvent\n(\ntimestamp\n,\n \ninEvents\n,\n \noutEvents\n)\n\n\nsiddhiAppRuntime\n.\naddCallback\n(\n\"query1\"\n,\nQueryCallbackImpl\n())\n\n\n\n\n\n\nTest filter using sample input events\n\n\n# Retrieving input handler to push events into Siddhi\n\n\ninputHandler\n \n=\n \nsiddhiAppRuntime\n.\ngetInputHandler\n(\n\"cseEventStream\"\n)\n\n\n\n# Starting event processing\n\n\nsiddhiAppRuntime\n.\nstart\n()\n\n\n\n# Sending events to Siddhi\n\n\ninputHandler\n.\nsend\n([\n\"IBM\"\n,\n700.0\n,\nLongType\n(\n100\n)])\n\n\ninputHandler\n.\nsend\n([\n\"WSO2\"\n,\n \n60.5\n,\n \nLongType\n(\n200\n)])\n\n\ninputHandler\n.\nsend\n([\n\"GOOG\"\n,\n \n50\n,\n \nLongType\n(\n30\n)])\n\n\ninputHandler\n.\nsend\n([\n\"IBM\"\n,\n \n76.6\n,\n \nLongType\n(\n400\n)])\n\n\ninputHandler\n.\nsend\n([\n\"WSO2\"\n,\n \n45.6\n,\n \nLongType\n(\n50\n)])\n\n\n\n# Wait for response\n\n\nsleep\n(\n0.1\n)\n\n\n\n\n\n\nShutdown the Siddhi Manager when processing is done\n\n\nsiddhiManager.shutdown()\n\n\n\n\n\nExpected Output\n\u00b6\n\n\nThe 3 events with volume less than 150 are printed in log.\n\n\nINFO  EventPrinter - Events{ @timestamp = 1497708406678, inEvents = [Event{timestamp=1497708406678, id=-1, data=[IBM, 700.0], isExpired=false}], RemoveEvents = null }\nINFO  EventPrinter - Events{ @timestamp = 1497708406685, inEvents = [Event{timestamp=1497708406685, id=-1, data=[GOOG, 50], isExpired=false}], RemoveEvents = null }\nINFO  EventPrinter - Events{ @timestamp = 1497708406687, inEvents = [Event{timestamp=1497708406687, id=-1, data=[WSO2, 45.6], isExpired=false}], RemoveEvents = null }",
            "title": "Run PySiddhi4"
        },
        {
            "location": "/Run-PySiddhi4/#run-pysiddhi4",
            "text": "The following is a sample demonstrating how to rung PySiddhi4.",
            "title": "Run PySiddhi4"
        },
        {
            "location": "/Run-PySiddhi4/#sample",
            "text": "This sample demonstrating how to write a streaming query to detect stock records having volume less than 150. \nThis code uses Siddhi 4.0 queries with PySiddhi4.  from   PySiddhi4.DataTypes.LongType   import   LongType  from   PySiddhi4.core.SiddhiManager   import   SiddhiManager  from   PySiddhi4.core.query.output.callback.QueryCallback   import   QueryCallback  from   PySiddhi4.core.util.EventPrinter   import   PrintEvent  from   time   import   sleep  siddhiManager   =   SiddhiManager ()  # Siddhi Query to filter events with volume less than 150 as output  siddhiApp   =   \"define stream cseEventStream (symbol string, price float, volume long); \"   +  \\ \"@info(name = 'query1') from cseEventStream[volume < 150] select symbol,price insert into outputStream;\"  # Generate runtime  siddhiAppRuntime   =   siddhiManager . createSiddhiAppRuntime ( siddhiApp )  # Add listener to capture output events  class   QueryCallbackImpl ( QueryCallback ): \n     def   receive ( self ,   timestamp ,   inEvents ,   outEvents ): \n         PrintEvent ( timestamp ,   inEvents ,   outEvents )  siddhiAppRuntime . addCallback ( \"query1\" , QueryCallbackImpl ())  # Retrieving input handler to push events into Siddhi  inputHandler   =   siddhiAppRuntime . getInputHandler ( \"cseEventStream\" )  # Starting event processing  siddhiAppRuntime . start ()  # Sending events to Siddhi  inputHandler . send ([ \"IBM\" , 700.0 , LongType ( 100 )])  inputHandler . send ([ \"WSO2\" ,   60.5 ,   LongType ( 200 )])  inputHandler . send ([ \"GOOG\" ,   50 ,   LongType ( 30 )])  inputHandler . send ([ \"IBM\" ,   76.6 ,   LongType ( 400 )])  inputHandler . send ([ \"WSO2\" ,   45.6 ,   LongType ( 50 )])  # Wait for response  sleep ( 10 )  siddhiManager . shutdown ()",
            "title": "Sample"
        },
        {
            "location": "/Run-PySiddhi4/#explanation",
            "text": "Above example is comprehensively described bellow:  Initialize libraries and imports  Add  this file  to working directory in order to enable log4j \nlogging. Log4j is used by PrintEvent to generate output.  from   PySiddhi4.DataTypes.LongType   import   LongType  from   PySiddhi4.core.SiddhiManager   import   SiddhiManager  from   PySiddhi4.core.query.output.callback.QueryCallback   import   QueryCallback  from   PySiddhi4.core.util.EventPrinter   import   PrintEvent  from   time   import   sleep   Define filter using Siddhi query  siddhiManager   =   SiddhiManager ()  # Siddhi Query to filter events with volume less than 150 as output  siddhiApp   =   \"define stream cseEventStream (symbol string, price float, volume long); \"   +  \\ \"@info(name = 'query1') from cseEventStream[volume < 150] select symbol,price insert into outputStream;\"  # Generate runtime  siddhiAppRuntime   =   siddhiManager . createSiddhiAppRuntime ( siddhiApp )   For more details on Siddhi Query Language, refer  Siddhi Query Language Guide .  Define a listener for filtered events  # Add listener to capture output events  class   QueryCallbackImpl ( QueryCallback ): \n     def   receive ( self ,   timestamp ,   inEvents ,   outEvents ): \n         PrintEvent ( timestamp ,   inEvents ,   outEvents )  siddhiAppRuntime . addCallback ( \"query1\" , QueryCallbackImpl ())   Test filter using sample input events  # Retrieving input handler to push events into Siddhi  inputHandler   =   siddhiAppRuntime . getInputHandler ( \"cseEventStream\" )  # Starting event processing  siddhiAppRuntime . start ()  # Sending events to Siddhi  inputHandler . send ([ \"IBM\" , 700.0 , LongType ( 100 )])  inputHandler . send ([ \"WSO2\" ,   60.5 ,   LongType ( 200 )])  inputHandler . send ([ \"GOOG\" ,   50 ,   LongType ( 30 )])  inputHandler . send ([ \"IBM\" ,   76.6 ,   LongType ( 400 )])  inputHandler . send ([ \"WSO2\" ,   45.6 ,   LongType ( 50 )])  # Wait for response  sleep ( 0.1 )   Shutdown the Siddhi Manager when processing is done  siddhiManager.shutdown()",
            "title": "Explanation"
        },
        {
            "location": "/Run-PySiddhi4/#expected-output",
            "text": "The 3 events with volume less than 150 are printed in log.  INFO  EventPrinter - Events{ @timestamp = 1497708406678, inEvents = [Event{timestamp=1497708406678, id=-1, data=[IBM, 700.0], isExpired=false}], RemoveEvents = null }\nINFO  EventPrinter - Events{ @timestamp = 1497708406685, inEvents = [Event{timestamp=1497708406685, id=-1, data=[GOOG, 50], isExpired=false}], RemoveEvents = null }\nINFO  EventPrinter - Events{ @timestamp = 1497708406687, inEvents = [Event{timestamp=1497708406687, id=-1, data=[WSO2, 45.6], isExpired=false}], RemoveEvents = null }",
            "title": "Expected Output"
        },
        {
            "location": "/Debugging-Siddhi-Queries/",
            "text": "Debug PySiddhi4\n\u00b6\n\n\nSiddhi Queries can be debugged at run time via PySiddhi. \nIt suppots following features with its Python APIs.\n\n\n\n\nAdd Siddhi Debugger Callbacks\n\n\nAcquiring and Releasing Breakpoints in Siddhi Queries\n\n\nQuerying details about Siddhi Query State\n\n\nDebugging Multi-threaded Siddhi Apps\n\n\n\n\nUsing Breakpoints and Siddhi Debugger Callbacks\n\u00b6\n\n\nUsing Siddhi Debugger, it is possible to break the query execution on occurrences of designated events (input or output events) and analyze the state of the query. Placing a breakpoint would cause Siddhi Debugger Callback to be triggered whenever a breakpoint is reached. The following code snippet demonstrates a basic usage of Siddhi Debugger.\n\n\n# Obtain siddhi debugger from Siddhi App Runtime.\n\n\nsiddhiDebugger\n \n=\n \nsiddhiAppRuntime\n.\ndebug\n()\n\n\n\n# Place a breakpoint.\n\n\nsiddhiDebugger\n.\nacquireBreakPoint\n(\n\"query 1\"\n,\n \nSiddhiDebugger\n.\nQueryTerminal\n.\nIN\n)\n\n\n\n# Setup a callback to receive debug events.\n\n\nclass\n \nSiddhiDebuggerCallbackImpl\n(\nSiddhiDebuggerCallback\n):\n\n    \ndef\n \ndebugEvent\n(\nself\n,\n \nevent\n,\n \nqueryName\n,\nqueryTerminal\n,\n \ndebugger\n):\n\n        \nlogging\n.\ninfo\n(\n\"Query: \"\n \n+\n \nqueryName\n \n+\n \n\":\"\n \n+\n \nqueryTerminal\n.\nname\n)\n\n        \nlogging\n.\ninfo\n(\nevent\n)\n\n\n        \n# Do assertions on event and check for special cases.\n\n\n        \n# Obtain next debuggable element of breakpoint.\n\n        \n# Alternatively can call debugger.play() to ignore pending\n\n        \n# debuggable elements and continue from breakpoint.\n\n        \ndebugger\n.\nnext\n()\n\n\n\n# Assign the debugger callback\n\n\nsiddhiDebugger\n.\nsetDebuggerCallback\n(\nSiddhiDebuggerCallbackImpl\n())\n\n\n\n# Send test inputs using inputHandler\n\n\ninputHandler\n.\nsend\n([\n\"WSO2\"\n,\n \n50.0\n,\n \n60\n])\n\n\ninputHandler\n.\nsend\n([\n\"WSO2\"\n,\n \n70.0\n,\n \n40\n])\n\n\n\n\n\n\nFor the complete code on above example and many other examples refer \nSiddhi Debugger Tests\n.",
            "title": "Debug PySiddhi4"
        },
        {
            "location": "/Debugging-Siddhi-Queries/#debug-pysiddhi4",
            "text": "Siddhi Queries can be debugged at run time via PySiddhi. \nIt suppots following features with its Python APIs.   Add Siddhi Debugger Callbacks  Acquiring and Releasing Breakpoints in Siddhi Queries  Querying details about Siddhi Query State  Debugging Multi-threaded Siddhi Apps",
            "title": "Debug PySiddhi4"
        },
        {
            "location": "/Debugging-Siddhi-Queries/#using-breakpoints-and-siddhi-debugger-callbacks",
            "text": "Using Siddhi Debugger, it is possible to break the query execution on occurrences of designated events (input or output events) and analyze the state of the query. Placing a breakpoint would cause Siddhi Debugger Callback to be triggered whenever a breakpoint is reached. The following code snippet demonstrates a basic usage of Siddhi Debugger.  # Obtain siddhi debugger from Siddhi App Runtime.  siddhiDebugger   =   siddhiAppRuntime . debug ()  # Place a breakpoint.  siddhiDebugger . acquireBreakPoint ( \"query 1\" ,   SiddhiDebugger . QueryTerminal . IN )  # Setup a callback to receive debug events.  class   SiddhiDebuggerCallbackImpl ( SiddhiDebuggerCallback ): \n     def   debugEvent ( self ,   event ,   queryName , queryTerminal ,   debugger ): \n         logging . info ( \"Query: \"   +   queryName   +   \":\"   +   queryTerminal . name ) \n         logging . info ( event ) \n\n         # Do assertions on event and check for special cases. \n\n         # Obtain next debuggable element of breakpoint. \n         # Alternatively can call debugger.play() to ignore pending \n         # debuggable elements and continue from breakpoint. \n         debugger . next ()  # Assign the debugger callback  siddhiDebugger . setDebuggerCallback ( SiddhiDebuggerCallbackImpl ())  # Send test inputs using inputHandler  inputHandler . send ([ \"WSO2\" ,   50.0 ,   60 ])  inputHandler . send ([ \"WSO2\" ,   70.0 ,   40 ])   For the complete code on above example and many other examples refer  Siddhi Debugger Tests .",
            "title": "Using Breakpoints and Siddhi Debugger Callbacks"
        },
        {
            "location": "/Using-Siddhi-from-Python/",
            "text": "Advanced Concepts of PySiddhi\n\u00b6\n\n\nKey Points\n\u00b6\n\n\nThe PySiddhi API is a wrapper on Siddhi Java Library, exposing it's core features to Python. It is important to keep \nfollowing points in mind when using PySiddhi API.\n\n\n\n\nIt is a wrapper. Not a port.\n - Whenever you use the PySiddhi API, the \nSiddhi Java Library\n is loaded in background using Java Virtual Machine.\n\n\nThe wrapper is focused on functionality provided by \nsiddhi-core\n which is found in package \norg.wso2.siddhi.core\n. The future versions of API may have the ability to load Siddhi Extensions directly from Java Packages and use them in Siddhi Queries. However, the individual Java classes of extensions will not be wrapped. \n\n\nOnly the classes that are required for API users are wrapped.\n  Classes which are designed to be used by Siddhi Java Library for its internal work will not be wrapped. \n\n\nPython doesn't differentiate \nInteger\n from \nLong\n. But Siddhi do.\n Python 3 does not differentiate \nInteger\n and \nLong\n Data Types. All Python \nIntegers\n fed into Siddhi (via \nInputHandler\n) are converted into Java \nIntegers\n. To feed Java \nLong\n to Siddhi (via \nInputHandler\n), use \nDataTypes.LongType\n. All \nLong\n outputs received from Siddhi (via callbacks) will also be converted to \nDataTypes.LongType\n.\n\n\nExample: \ninputHandler.send([\"IBM\",700.0,LongType(100)])\n\n\nClean up everything when you are done.\n Remember to call \nshutdown\n of \nSiddhiManager\n and \nSiddhiAppRuntime\n.\n\n\n\n\nJava Siddhi to PySiddhi Mappings\n\u00b6\n\n\nThe PySiddhi wrapper is focused on functionality provided by \nsiddhi-core\n. \nThe classes in Java package \norg.wso2.siddhi.core\n are mapped to \nPySiddhi4.core\n using hand written logic. These are not an auto-generated. \nThe follow table demonstrates major mappings of PySiddhi.\n\n\n\n\n\n\n\n\nJava Class\n\n\nPython Import\n\n\n\n\n\n\n\n\n\n\norg.wso2.siddhi.core.SiddhiManager\n\n\nfrom PySiddhi4.core.SiddhiManager import SiddhiManager\n\n\n\n\n\n\norg.wso2.siddhi.core.ExecutionPlanRuntime\n\n\nfrom PySiddhi4.core.SiddhiAppRuntime import SiddhiAppRuntime\n\n\n\n\n\n\norg.wso2.siddhi.core.event.Event\n\n\nfrom PySiddhi4.core.event.Event import Event\n\n\n\n\n\n\norg.wso2.siddhi.core.event.ComplexEvent\n\n\nfrom PySiddhi4.core.event.ComplexEvent import ComplexEvent\n\n\n\n\n\n\norg.wso2.siddhi.core.stream.input.InputHandler\n\n\nfrom PySiddhi4.core.stream.input.InputHandler import InputHandler\n\n\n\n\n\n\norg.wso2.siddhi.core.stream.output.StreamCallback\n\n\nfrom PySiddhi4.core.stream.output.StreamCallback import StreamCallback\n\n\n\n\n\n\norg.wso2.siddhi.core.query.output.callback.QueryCallback\n\n\nfrom PySiddhi4.core.query.output.callback.QueryCallback import QueryCallback\n\n\n\n\n\n\norg.wso2.siddhi.core.debugger.SiddhiDebugger\n\n\nfrom PySiddhi4.core.debugger.SiddhiDebugger import SiddhiDebugger\n\n\n\n\n\n\norg.wso2.siddhi.core.debugger.SiddhiDebuggerCallback\n\n\nfrom PySiddhi4.core.debugger.SiddhiDebuggerCallback import SiddhiDebuggerCallback\n\n\n\n\n\n\norg.wso2.siddhi.core.util.EventPrinter\n\n\nimport PySiddhi4.core.util.EventPrinter",
            "title": "Advanced Concepts of PySiddhi"
        },
        {
            "location": "/Using-Siddhi-from-Python/#advanced-concepts-of-pysiddhi",
            "text": "",
            "title": "Advanced Concepts of PySiddhi"
        },
        {
            "location": "/Using-Siddhi-from-Python/#key-points",
            "text": "The PySiddhi API is a wrapper on Siddhi Java Library, exposing it's core features to Python. It is important to keep \nfollowing points in mind when using PySiddhi API.   It is a wrapper. Not a port.  - Whenever you use the PySiddhi API, the  Siddhi Java Library  is loaded in background using Java Virtual Machine.  The wrapper is focused on functionality provided by  siddhi-core  which is found in package  org.wso2.siddhi.core . The future versions of API may have the ability to load Siddhi Extensions directly from Java Packages and use them in Siddhi Queries. However, the individual Java classes of extensions will not be wrapped.   Only the classes that are required for API users are wrapped.   Classes which are designed to be used by Siddhi Java Library for its internal work will not be wrapped.   Python doesn't differentiate  Integer  from  Long . But Siddhi do.  Python 3 does not differentiate  Integer  and  Long  Data Types. All Python  Integers  fed into Siddhi (via  InputHandler ) are converted into Java  Integers . To feed Java  Long  to Siddhi (via  InputHandler ), use  DataTypes.LongType . All  Long  outputs received from Siddhi (via callbacks) will also be converted to  DataTypes.LongType .  Example:  inputHandler.send([\"IBM\",700.0,LongType(100)])  Clean up everything when you are done.  Remember to call  shutdown  of  SiddhiManager  and  SiddhiAppRuntime .",
            "title": "Key Points"
        },
        {
            "location": "/Using-Siddhi-from-Python/#java-siddhi-to-pysiddhi-mappings",
            "text": "The PySiddhi wrapper is focused on functionality provided by  siddhi-core . \nThe classes in Java package  org.wso2.siddhi.core  are mapped to  PySiddhi4.core  using hand written logic. These are not an auto-generated. \nThe follow table demonstrates major mappings of PySiddhi.     Java Class  Python Import      org.wso2.siddhi.core.SiddhiManager  from PySiddhi4.core.SiddhiManager import SiddhiManager    org.wso2.siddhi.core.ExecutionPlanRuntime  from PySiddhi4.core.SiddhiAppRuntime import SiddhiAppRuntime    org.wso2.siddhi.core.event.Event  from PySiddhi4.core.event.Event import Event    org.wso2.siddhi.core.event.ComplexEvent  from PySiddhi4.core.event.ComplexEvent import ComplexEvent    org.wso2.siddhi.core.stream.input.InputHandler  from PySiddhi4.core.stream.input.InputHandler import InputHandler    org.wso2.siddhi.core.stream.output.StreamCallback  from PySiddhi4.core.stream.output.StreamCallback import StreamCallback    org.wso2.siddhi.core.query.output.callback.QueryCallback  from PySiddhi4.core.query.output.callback.QueryCallback import QueryCallback    org.wso2.siddhi.core.debugger.SiddhiDebugger  from PySiddhi4.core.debugger.SiddhiDebugger import SiddhiDebugger    org.wso2.siddhi.core.debugger.SiddhiDebuggerCallback  from PySiddhi4.core.debugger.SiddhiDebuggerCallback import SiddhiDebuggerCallback    org.wso2.siddhi.core.util.EventPrinter  import PySiddhi4.core.util.EventPrinter",
            "title": "Java Siddhi to PySiddhi Mappings"
        },
        {
            "location": "/Quick-Demo-(SP4)/",
            "text": "Run PySiddhi Client with WSO2 Stream Processor\n\u00b6\n\n\nPySiddhi4 REST Client enable you to manage \nWSO2 Stream Processor\n using Python.\nThe detail information on PySiddhi4 client APIs refer:\n\n\n \nClient APIs to Manage Siddhi App\n\n\n \nClient APIs to Simulate Events\n\n\nThe following steps demonstrate how PySiddhi4 SP Client can manage Siddhi Apps running on WSO2 Stream Processor 4.x.x. \nThis code retrieves the list of Siddhi Apps published in WSO2SP.\n\n\nStep 1:\n Setup WSO2 Stream Processor\n  - Obtain WSO2 SP 4.x.x binary distribution from \nhttps://wso2.com/analytics\n.\n  - Extract \nwso2sp-4.x.x.zip\n to a suitable location (say \nSP_HOME\n).\n  - Navigate to \nSP_Home/bin/\n and run \nsh worker.sh\n.\n\n\nStep 2:\n Load Python Imports.\n\n\nfrom\n \nPySiddhi4.sp.SPClient\n \nimport\n \nSPClient\n\n\n\n\n\n\nStep 3:\n Connect to WSO2 SP via REST API using the SiddhiApp Management Client.\n\n\nspPythonClient\n \n=\n \nSPClient\n(\n'http://localhost:9090'\n)\n\n\nsiddhiAppManagementClient\n \n=\n \nspPythonClient\n.\ngetSiddhiAppManagementClient\n()\n\n\n\n\n\n\nStep 4:\n Obtain list of Siddhi Apps published in WSO2 SP.\n\n\nprint\n(\nsiddhiAppManagementClient\n.\nlistSiddhiApps\n())\n\n\n\n\n\n\nSample Outputs\n\n\n['TestSiddhiApp']\n\n\n\n\n\nCleanup\n\n\nStop WSO2 SP by sending \nCtrl+C\n to terminal window running \nworker.sh\n. This would shutdown the SP server",
            "title": "Run PySiddhi Client"
        },
        {
            "location": "/Quick-Demo-(SP4)/#run-pysiddhi-client-with-wso2-stream-processor",
            "text": "PySiddhi4 REST Client enable you to manage  WSO2 Stream Processor  using Python.\nThe detail information on PySiddhi4 client APIs refer:    Client APIs to Manage Siddhi App    Client APIs to Simulate Events  The following steps demonstrate how PySiddhi4 SP Client can manage Siddhi Apps running on WSO2 Stream Processor 4.x.x. \nThis code retrieves the list of Siddhi Apps published in WSO2SP.  Step 1:  Setup WSO2 Stream Processor\n  - Obtain WSO2 SP 4.x.x binary distribution from  https://wso2.com/analytics .\n  - Extract  wso2sp-4.x.x.zip  to a suitable location (say  SP_HOME ).\n  - Navigate to  SP_Home/bin/  and run  sh worker.sh .  Step 2:  Load Python Imports.  from   PySiddhi4.sp.SPClient   import   SPClient   Step 3:  Connect to WSO2 SP via REST API using the SiddhiApp Management Client.  spPythonClient   =   SPClient ( 'http://localhost:9090' )  siddhiAppManagementClient   =   spPythonClient . getSiddhiAppManagementClient ()   Step 4:  Obtain list of Siddhi Apps published in WSO2 SP.  print ( siddhiAppManagementClient . listSiddhiApps ())   Sample Outputs  ['TestSiddhiApp']  Cleanup  Stop WSO2 SP by sending  Ctrl+C  to terminal window running  worker.sh . This would shutdown the SP server",
            "title": "Run PySiddhi Client with WSO2 Stream Processor"
        },
        {
            "location": "/Siddhi-App-Management-of-WSO2-SP-4/",
            "text": "Siddhi App Management using PySiddhi Client\n\u00b6\n\n\nUsing \nWSO2 SP Client\n in \nPySiddhi4\n, following operations can be undertaken on \nSiddhi App Management\n of \nWSO2 SP 4.0\n.\n\n List all Siddhi Apps.\n\n Retrieve Siddhi App using name.\n\n Retrieve Status of Siddhi App.\n\n Save a new Siddhi App in SP.\n\n Update a Siddhi App stored in SP.\n\n Delete a Siddhi App stored in SP.\n\n\nPre-requisites\n\u00b6\n\n\n\n\nInstall \nPySiddhi4\n by following \nInstallation Guide\n.\n\n\nWSO2 SP 4.0 must be already installed and running. If not, follow the steps below.\n\n\nObtain WSO2 SP 4.x.x binary distribution from \nhttps://wso2.com/analytics\n.\n\n\nExtract \nwso2sp-4.x.x.zip\n to a suitable location (say \nSP_HOME\n).\n\n\nNavigate to \nSP_Home/bin/\n and run \nsh worker.sh\n.\n\n\n\n\nSupported API operations\n\u00b6\n\n\nList all Siddhi Apps\n\u00b6\n\n\nfrom\n \nPySiddhi4.sp.SPClient\n \nimport\n \nSPClient\n\n\n\nspPythonClient\n \n=\n \nSPClient\n(\n'http://localhost:9090'\n)\n \n# host URL of SP\n\n\nsiddhiAppManagementClient\n \n=\n \nspPythonClient\n.\ngetSiddhiAppManagementClient\n()\n\n\n\nprint\n(\nsiddhiAppManagementClient\n.\nlistSiddhiApps\n())\n \n# prints a list of siddhi apps\n\n\n\n\n\n\nRetrieve Siddhi App using Name\n\u00b6\n\n\nfrom\n \nPySiddhi4.sp.SPClient\n \nimport\n \nSPClient\n\n\nspPythonClient\n \n=\n \nSPClient\n(\n'http://localhost:9090'\n)\n \n# host URL of SP\n\n\nsiddhiAppManagementClient\n \n=\n \nspPythonClient\n.\ngetSiddhiAppManagementClient\n()\n\n\n\napp\n \n=\n \nsiddhiAppManagementClient\n.\nretrieveSiddhiApp\n(\n\"TestSiddhiApp\"\n,\n \nusername\n=\nadmin\n,\n \npassword\n=\nadmin\n)\n\n\nprint\n(\napp\n)\n\n\n\n\n\n\nRetrieve Siddhi App Status\n\u00b6\n\n\nfrom\n \nPySiddhi4.sp.SPClient\n \nimport\n \nSPClient\n\n\nspPythonClient\n \n=\n \nSPClient\n(\n'http://localhost:9090'\n)\n \n# host URL of SP\n\n\nsiddhiAppManagementClient\n \n=\n \nspPythonClient\n.\ngetSiddhiAppManagementClient\n()\n\n\n\nstatus\n \n=\n \nsiddhiAppManagementClient\n.\nretrieveStatusSiddhiApp\n(\n\"TestSiddhiApp\"\n,\n \nusername\n=\nadmin\n,\n \npassword\n=\nadmin\n)\n\n\nprint\n \n(\nstatus\n)\n \n# prints status of siddhi app (active)\n\n\n\n\n\n\nSave new Siddhi App\n\u00b6\n\n\nfrom\n \nPySiddhi4.sp.SPClient\n \nimport\n \nSPClient\n\n\n\nspPythonClient\n \n=\n \nSPClient\n(\n'http://localhost:9090'\n)\n \n# host URL of SP\n\n\nsiddhiAppManagementClient\n \n=\n \nspPythonClient\n.\ngetSiddhiAppManagementClient\n()\n\n\n\nsiddhiApp\n \n=\n \n\"@App:name('TestSiddhiApp1') \"\n \n                \n\"define stream FooStream(symbol string, price float, volume long); \"\n \n                \n\"@source(type='inMemory', topic='symbol', @map(type='passThrough')) \"\n \n                \n\"define stream BarStream(symbol string, price float, volume long); \"\n\n                \n\"from FooStream select symbol, price, volume insert into BarStream; \"\n\n\n\nif\n \nsiddhiAppManagementClient\n.\nsaveSiddhiApp\n(\nsiddhiApp\n,\n \nusername\n=\nadmin\n,\n \npassword\n=\nadmin\n):\n\n    \nprint\n(\n\"Successfully saved!\"\n)\n\n\n\n\n\n\nUpdate a saved Siddhi App\n\u00b6\n\n\nfrom\n \nPySiddhi4.sp.SPClient\n \nimport\n \nSPClient\n\n\nfrom\n \nPySiddhi4.sp.SiddhiAppManagement.SiddhiAppManagementClient\n \nimport\n \nUpdateAppStatusResponse\n\n\n\nspPythonClient\n \n=\n \nSPClient\n(\n'http://localhost:9090'\n)\n \n# Host URL of SP\n\n\nsiddhiAppManagementClient\n \n=\n \nspPythonClient\n.\ngetSiddhiAppManagementClient\n()\n\n\n\nsiddhiApp\n \n=\n \n\"@App:name('TestSiddhiApp1') \"\n \n                \n\"define stream FooStream (symbol string, price float, volume long); \"\n \n                \n\"@source(type='inMemory', topic='symbol', @map(type='passThrough')) \"\n \n                \n\"define stream BarStream (symbol string, price float, volume long); \"\n \n                \n\"from FooStream select symbol, price, volume insert into BarStream; \"\n\n\n\nresult\n \n=\n \nsiddhiAppManagementClient\n.\nupdateSiddhiApp\n(\nsiddhiApp\n,\n \nusername\n=\nadmin\n,\n \npassword\n=\nadmin\n)\n\n\nif\n \nresult\n.\nname\n \n==\n \nUpdateAppStatusResponse\n.\nsavedNew\n.\nname\n:\n\n    \nprint\n(\n\"Saved new Siddhi App\"\n)\n\n\nelif\n \nresult\n.\nname\n \n==\n \nUpdateAppStatusResponse\n.\nupdated\n.\nname\n:\n\n    \nprint\n(\n\"Updated saved Siddhi App\"\n)\n\n\n\n\n\n\nDelete a Siddhi App\n\u00b6\n\n\nfrom\n \nPySiddhi4.sp.SPClient\n \nimport\n \nSPClient\n\n\n\nspPythonClient\n \n=\n \nSPClient\n(\n'http://localhost:9090'\n)\n \n# host URL of SP\n\n\nsiddhiAppManagementClient\n \n=\n \nspPythonClient\n.\ngetSiddhiAppManagementClient\n()\n\n\n\nsiddhiAppManagementClient\n.\ndeleteSiddhiApp\n(\n\"TestSiddhiApp1\"\n,\n \nusername\n=\nadmin\n,\n \npassword\n=\nadmin\n)\n \n# returns True if successfully deleted",
            "title": "Client APIs to Manage Siddhi App"
        },
        {
            "location": "/Siddhi-App-Management-of-WSO2-SP-4/#siddhi-app-management-using-pysiddhi-client",
            "text": "Using  WSO2 SP Client  in  PySiddhi4 , following operations can be undertaken on  Siddhi App Management  of  WSO2 SP 4.0 .  List all Siddhi Apps.  Retrieve Siddhi App using name.  Retrieve Status of Siddhi App.  Save a new Siddhi App in SP.  Update a Siddhi App stored in SP.  Delete a Siddhi App stored in SP.",
            "title": "Siddhi App Management using PySiddhi Client"
        },
        {
            "location": "/Siddhi-App-Management-of-WSO2-SP-4/#pre-requisites",
            "text": "Install  PySiddhi4  by following  Installation Guide .  WSO2 SP 4.0 must be already installed and running. If not, follow the steps below.  Obtain WSO2 SP 4.x.x binary distribution from  https://wso2.com/analytics .  Extract  wso2sp-4.x.x.zip  to a suitable location (say  SP_HOME ).  Navigate to  SP_Home/bin/  and run  sh worker.sh .",
            "title": "Pre-requisites"
        },
        {
            "location": "/Siddhi-App-Management-of-WSO2-SP-4/#supported-api-operations",
            "text": "",
            "title": "Supported API operations"
        },
        {
            "location": "/Siddhi-App-Management-of-WSO2-SP-4/#list-all-siddhi-apps",
            "text": "from   PySiddhi4.sp.SPClient   import   SPClient  spPythonClient   =   SPClient ( 'http://localhost:9090' )   # host URL of SP  siddhiAppManagementClient   =   spPythonClient . getSiddhiAppManagementClient ()  print ( siddhiAppManagementClient . listSiddhiApps ())   # prints a list of siddhi apps",
            "title": "List all Siddhi Apps"
        },
        {
            "location": "/Siddhi-App-Management-of-WSO2-SP-4/#retrieve-siddhi-app-using-name",
            "text": "from   PySiddhi4.sp.SPClient   import   SPClient  spPythonClient   =   SPClient ( 'http://localhost:9090' )   # host URL of SP  siddhiAppManagementClient   =   spPythonClient . getSiddhiAppManagementClient ()  app   =   siddhiAppManagementClient . retrieveSiddhiApp ( \"TestSiddhiApp\" ,   username = admin ,   password = admin )  print ( app )",
            "title": "Retrieve Siddhi App using Name"
        },
        {
            "location": "/Siddhi-App-Management-of-WSO2-SP-4/#retrieve-siddhi-app-status",
            "text": "from   PySiddhi4.sp.SPClient   import   SPClient  spPythonClient   =   SPClient ( 'http://localhost:9090' )   # host URL of SP  siddhiAppManagementClient   =   spPythonClient . getSiddhiAppManagementClient ()  status   =   siddhiAppManagementClient . retrieveStatusSiddhiApp ( \"TestSiddhiApp\" ,   username = admin ,   password = admin )  print   ( status )   # prints status of siddhi app (active)",
            "title": "Retrieve Siddhi App Status"
        },
        {
            "location": "/Siddhi-App-Management-of-WSO2-SP-4/#save-new-siddhi-app",
            "text": "from   PySiddhi4.sp.SPClient   import   SPClient  spPythonClient   =   SPClient ( 'http://localhost:9090' )   # host URL of SP  siddhiAppManagementClient   =   spPythonClient . getSiddhiAppManagementClient ()  siddhiApp   =   \"@App:name('TestSiddhiApp1') \"  \n                 \"define stream FooStream(symbol string, price float, volume long); \"  \n                 \"@source(type='inMemory', topic='symbol', @map(type='passThrough')) \"  \n                 \"define stream BarStream(symbol string, price float, volume long); \" \n                 \"from FooStream select symbol, price, volume insert into BarStream; \"  if   siddhiAppManagementClient . saveSiddhiApp ( siddhiApp ,   username = admin ,   password = admin ): \n     print ( \"Successfully saved!\" )",
            "title": "Save new Siddhi App"
        },
        {
            "location": "/Siddhi-App-Management-of-WSO2-SP-4/#update-a-saved-siddhi-app",
            "text": "from   PySiddhi4.sp.SPClient   import   SPClient  from   PySiddhi4.sp.SiddhiAppManagement.SiddhiAppManagementClient   import   UpdateAppStatusResponse  spPythonClient   =   SPClient ( 'http://localhost:9090' )   # Host URL of SP  siddhiAppManagementClient   =   spPythonClient . getSiddhiAppManagementClient ()  siddhiApp   =   \"@App:name('TestSiddhiApp1') \"  \n                 \"define stream FooStream (symbol string, price float, volume long); \"  \n                 \"@source(type='inMemory', topic='symbol', @map(type='passThrough')) \"  \n                 \"define stream BarStream (symbol string, price float, volume long); \"  \n                 \"from FooStream select symbol, price, volume insert into BarStream; \"  result   =   siddhiAppManagementClient . updateSiddhiApp ( siddhiApp ,   username = admin ,   password = admin )  if   result . name   ==   UpdateAppStatusResponse . savedNew . name : \n     print ( \"Saved new Siddhi App\" )  elif   result . name   ==   UpdateAppStatusResponse . updated . name : \n     print ( \"Updated saved Siddhi App\" )",
            "title": "Update a saved Siddhi App"
        },
        {
            "location": "/Siddhi-App-Management-of-WSO2-SP-4/#delete-a-siddhi-app",
            "text": "from   PySiddhi4.sp.SPClient   import   SPClient  spPythonClient   =   SPClient ( 'http://localhost:9090' )   # host URL of SP  siddhiAppManagementClient   =   spPythonClient . getSiddhiAppManagementClient ()  siddhiAppManagementClient . deleteSiddhiApp ( \"TestSiddhiApp1\" ,   username = admin ,   password = admin )   # returns True if successfully deleted",
            "title": "Delete a Siddhi App"
        },
        {
            "location": "/Event-Simulator-of-SP-4/",
            "text": "Event Simulation using PySiddhi Client\n\u00b6\n\n\nFollowing operations are supported by WSO2 Stream Processor 4 Event Simulator Client of PySiddhi4.\n\n\n\n\nSingle Simulations\n\n\nSaving a simulation configuration\n\n\nEditing a simulation configuration\n\n\nDeleting a simulation configuration\n\n\nRetrieving a simulation configuration\n\n\nUploading a CSV file\n\n\nEditing and uploaded CSV file\n\n\nDeleting an uploaded CSV file\n\n\nPausing an event simulation\n\n\nResuming an event simulation\n\n\nStopping an event simulation\n\n\n\n\nRefer \nDocumentation of WSO2 SP 4.0 Event simulator REST API\n for more details.\n\n\nPre-requisites\n\u00b6\n\n\n\n\nInstall \nPySiddhi4\n by following \nInstallation Guide\n.\n\n\nWSO2 SP 4.0 must be already installed and running. If not, follow the steps below.\n\n\nObtain WSO2 SP 4.x.x binary distribution from https://github.com/wso2/product-sp/releases.\n\n\nExtract \nwso2sp-4.x.x.zip\n to a suitable location (say \nSP_HOME\n).\n\n\nNavigate to \nSP_Home/bin/\n and run \nsh worker.sh\n.\n\n\n\n\nSupported API operations\n\u00b6\n\n\nSingle Simulations\n\u00b6\n\n\nfrom\n \nPySiddhi4.sp.SPClient\n \nimport\n \nSPClient\n\n\nfrom\n \nPySiddhi4.sp.EventSimulator.SingleSimulationConfiguration\n \nimport\n \nSingleSimulationConfiguration\n\n\n\nspPythonClient\n \n=\n \nSPClient\n(\n'http://localhost:9090'\n)\n \n# host URL of SP\n\n\neventSimulatorClient\n \n=\n \nspPythonClient\n.\ngetEventSimulatorClient\n()\n\n\n\nsingleSimulationConfiguration\n \n=\n \nSingleSimulationConfiguration\n(\n\"TestSiddhiApp\"\n,\n\"FooStream\"\n,[\nNone\n,\n \n9\n,\n \n45\n])\n\n\n\nif\n \neventSimulatorClient\n.\nsimulateSingleEvent\n(\nsingleSimulationConfiguration\n,\n \nusername\n=\n\"admin\"\n,\n \npassword\n=\n\"admin\"\n):\n\n    \nlogging\n.\ninfo\n(\n\"Successfully Simulated Single Event\"\n)\n\n\n\n\n\n\nSaving a Simulation Configuration (Feed Simulation Configuration)\n\u00b6\n\n\nfrom\n \nPySiddhi4.sp.SPClient\n \nimport\n \nSPClient\n\n\nfrom\n \nPySiddhi4.sp.EventSimulator.AttributeConfiguration\n \nimport\n \nAttributeConfiguration\n\n\nfrom\n \nPySiddhi4.sp.EventSimulator.FeedSimulationConfiguration\n \nimport\n \nFeedSimulationConfiguration\n\n\nfrom\n \nPySiddhi4.sp.EventSimulator.SimulationSource\n \nimport\n \nSimulationSource\n\n\n\nspPythonClient\n \n=\n \nSPClient\n(\n'http://localhost:9090'\n)\n \n# host URL of SP\n\n\neventSimulatorClient\n \n=\n \nspPythonClient\n.\ngetEventSimulatorClient\n()\n\n\n\nsvr\n \n=\n \nFeedSimulationConfiguration\n(\n\"simulationPrimitive\"\n)\n\n\nsvr\n.\nproperties\n.\ntimestampStartTime\n \n=\n \n1488615136958\n\n\nsvr\n.\nproperties\n.\ntimestampEndTime\n \n=\n \nNone\n\n\nsvr\n.\nproperties\n.\nnoOfEvents\n \n=\n \n8\n\n\nsvr\n.\nproperties\n.\ntimeInterval\n \n=\n \n1000\n\n\n\nsm1\n \n=\n \nSimulationSource\n(\nsimulationType\n=\nSimulationSource\n.\nType\n.\nRANDOM_DATA_SIMULATION\n,\n \nstreamName\n=\n\"FooStream\"\n,\n \nsiddhiAppName\n=\n\"TestSiddhiApp\"\n,\n \ntimestampInterval\n=\n5\n)\n\n\n\nsm1\n.\nattributeConfiguration\n.\nappend\n(\nAttributeConfiguration\n(\nAttributeConfiguration\n.\nType\n.\nPRIMITIVE_BASED\n,\n \nlength\n=\n10\n))\n\n\nsm1\n.\nattributeConfiguration\n.\nappend\n(\nAttributeConfiguration\n(\nAttributeConfiguration\n.\nType\n.\nPRIMITIVE_BASED\n,\n \nmin\n=\n35000\n,\n \nmax\n=\n30000\n,\n \nprecision\n=\n2\n))\n\n\nsm1\n.\nattributeConfiguration\n.\nappend\n(\nAttributeConfiguration\n(\nAttributeConfiguration\n.\nType\n.\nPRIMITIVE_BASED\n,\n \nmin\n=\n150\n,\n \nmax\n=\n300\n))\n\n\n\nsvr\n.\nsources\n.\nappend\n(\nsm1\n)\n\n\n\nif\n \neventSimulatorClient\n.\nsaveSimulationFeedConfiguration\n(\nsvr\n,\n \nusername\n=\n\"admin\"\n,\n \npassword\n=\n\"admin\"\n):\n\n    \nprint\n(\n\"Successfully Saved Simulation Feed Configuration\"\n)\n\n\n\n\n\n\nFor more examples on Event Simulator, refer \nEventSimulatorTests\n.",
            "title": "Client APIs to Simulate Events"
        },
        {
            "location": "/Event-Simulator-of-SP-4/#event-simulation-using-pysiddhi-client",
            "text": "Following operations are supported by WSO2 Stream Processor 4 Event Simulator Client of PySiddhi4.   Single Simulations  Saving a simulation configuration  Editing a simulation configuration  Deleting a simulation configuration  Retrieving a simulation configuration  Uploading a CSV file  Editing and uploaded CSV file  Deleting an uploaded CSV file  Pausing an event simulation  Resuming an event simulation  Stopping an event simulation   Refer  Documentation of WSO2 SP 4.0 Event simulator REST API  for more details.",
            "title": "Event Simulation using PySiddhi Client"
        },
        {
            "location": "/Event-Simulator-of-SP-4/#pre-requisites",
            "text": "Install  PySiddhi4  by following  Installation Guide .  WSO2 SP 4.0 must be already installed and running. If not, follow the steps below.  Obtain WSO2 SP 4.x.x binary distribution from https://github.com/wso2/product-sp/releases.  Extract  wso2sp-4.x.x.zip  to a suitable location (say  SP_HOME ).  Navigate to  SP_Home/bin/  and run  sh worker.sh .",
            "title": "Pre-requisites"
        },
        {
            "location": "/Event-Simulator-of-SP-4/#supported-api-operations",
            "text": "",
            "title": "Supported API operations"
        },
        {
            "location": "/Event-Simulator-of-SP-4/#single-simulations",
            "text": "from   PySiddhi4.sp.SPClient   import   SPClient  from   PySiddhi4.sp.EventSimulator.SingleSimulationConfiguration   import   SingleSimulationConfiguration  spPythonClient   =   SPClient ( 'http://localhost:9090' )   # host URL of SP  eventSimulatorClient   =   spPythonClient . getEventSimulatorClient ()  singleSimulationConfiguration   =   SingleSimulationConfiguration ( \"TestSiddhiApp\" , \"FooStream\" ,[ None ,   9 ,   45 ])  if   eventSimulatorClient . simulateSingleEvent ( singleSimulationConfiguration ,   username = \"admin\" ,   password = \"admin\" ): \n     logging . info ( \"Successfully Simulated Single Event\" )",
            "title": "Single Simulations"
        },
        {
            "location": "/Event-Simulator-of-SP-4/#saving-a-simulation-configuration-feed-simulation-configuration",
            "text": "from   PySiddhi4.sp.SPClient   import   SPClient  from   PySiddhi4.sp.EventSimulator.AttributeConfiguration   import   AttributeConfiguration  from   PySiddhi4.sp.EventSimulator.FeedSimulationConfiguration   import   FeedSimulationConfiguration  from   PySiddhi4.sp.EventSimulator.SimulationSource   import   SimulationSource  spPythonClient   =   SPClient ( 'http://localhost:9090' )   # host URL of SP  eventSimulatorClient   =   spPythonClient . getEventSimulatorClient ()  svr   =   FeedSimulationConfiguration ( \"simulationPrimitive\" )  svr . properties . timestampStartTime   =   1488615136958  svr . properties . timestampEndTime   =   None  svr . properties . noOfEvents   =   8  svr . properties . timeInterval   =   1000  sm1   =   SimulationSource ( simulationType = SimulationSource . Type . RANDOM_DATA_SIMULATION ,   streamName = \"FooStream\" ,   siddhiAppName = \"TestSiddhiApp\" ,   timestampInterval = 5 )  sm1 . attributeConfiguration . append ( AttributeConfiguration ( AttributeConfiguration . Type . PRIMITIVE_BASED ,   length = 10 ))  sm1 . attributeConfiguration . append ( AttributeConfiguration ( AttributeConfiguration . Type . PRIMITIVE_BASED ,   min = 35000 ,   max = 30000 ,   precision = 2 ))  sm1 . attributeConfiguration . append ( AttributeConfiguration ( AttributeConfiguration . Type . PRIMITIVE_BASED ,   min = 150 ,   max = 300 ))  svr . sources . append ( sm1 )  if   eventSimulatorClient . saveSimulationFeedConfiguration ( svr ,   username = \"admin\" ,   password = \"admin\" ): \n     print ( \"Successfully Saved Simulation Feed Configuration\" )   For more examples on Event Simulator, refer  EventSimulatorTests .",
            "title": "Saving a Simulation Configuration (Feed Simulation Configuration)"
        }
    ]
}