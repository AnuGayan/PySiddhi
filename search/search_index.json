{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to \nPySiddhi\n .\n\n\nSiddhi is a java library that listens to events from data streams, detects complex conditions described via a \nStreaming SQL language\n, and triggers actions. It performs both \nStream Processing\n and \nComplex Event Processing\n.\n\n\nThe Siddhi Library is originally written in Java 8.0. \nPySiddhi\n is a Python wrapper on Siddhi Java Library.\n\n\n\n\nSiddhi 4 is wrapped by PySiddhi4.\n\n\n\n\nPySiddhi4 includes a REST Client for WSO2 Stream Processor(SP) 4.x.x.\n\n\nNote: PySiddhi API is initiated by a project for Google Summer of Code 2017 Program.\n\n\nContent\n\n\n\n\nIntroduction (this page)\n\n\nInstallation Guide\n\n\nFull Quick Demo\n\n\nFor Siddhi 4\n\n\nFor WSO2 SP 4\n\n\n\n\n\n\nUsing Siddhi from Python\n\n\nWSO2 Stream Processor 4 REST Client\n\n\nSiddhi App Management using Python Client\n\n\nUsing Event Simulator\n\n\n\n\n\n\nDebugging Siddhi Queries\n \n\n\n\n\nQuick Demo\n\n\nFollowing is a quick demo of how to use PySiddhi4. For comprehensive demo please refer to \nthis link\n\n\nStep 1\n - Define filter using Siddhi Query\n\n\nsiddhiManager = SiddhiManager()\n# Siddhi Query to filter events with volume less than 150 as output\nsiddhiApp = \ndefine stream cseEventStream (symbol string, price float, volume long); \n + \\\n\n@info(name = 'query1') from cseEventStream[volume \n 150] select symbol,price insert into outputStream;\n\n\n# Generate runtime\nsiddhiAppRuntime = siddhiManager.createSiddhiAppRuntime(siddhiApp)\n\n\n\n\nFor more details on Siddhi Query Language, refer \nSiddhi Query Language Guide\n in WSO2 Docs.\n\n\nStep 2\n - Define a listener for filtered events.\n\n\n# Add listener to capture output events\nclass QueryCallbackImpl(QueryCallback):\n    def receive(self, timestamp, inEvents, outEvents):\n        PrintEvent(timestamp, inEvents, outEvents)\nsiddhiAppRuntime.addCallback(\nquery1\n,QueryCallbackImpl())\n\n\n\n\nStep 3\n - Test filter using sample input events\n\n\n# Retrieving input handler to push events into Siddhi\ninputHandler = siddhiAppRuntime.getInputHandler(\ncseEventStream\n)\n\n# Starting event processing\nsiddhiAppRuntime.start()\n\n# Sending events to Siddhi\ninputHandler.send([\nIBM\n,700.0,LongType(100)])\ninputHandler.send([\nWSO2\n, 60.5, LongType(200)])\ninputHandler.send([\nGOOG\n, 50, LongType(30)])\ninputHandler.send([\nIBM\n, 76.6, LongType(400)])\ninputHandler.send([\nWSO2\n, 45.6, LongType(50)])\n\n# Wait for response\nsleep(0.1)\n\n\n\n\nOutput\n\n\nThe 3 events with volume less than 150 are printed in log.\n\n\nINFO  EventPrinter - Events{ @timestamp = 1497708406678, inEvents = [Event{timestamp=1497708406678, id=-1, data=[IBM, 700.0], isExpired=false}], RemoveEvents = null }\nINFO  EventPrinter - Events{ @timestamp = 1497708406685, inEvents = [Event{timestamp=1497708406685, id=-1, data=[GOOG, 50], isExpired=false}], RemoveEvents = null }\nINFO  EventPrinter - Events{ @timestamp = 1497708406687, inEvents = [Event{timestamp=1497708406687, id=-1, data=[WSO2, 45.6], isExpired=false}], RemoveEvents = null }\n\n\n\n\nClean Up\n - Remember to shutdown the Siddhi Manager when your done.\n\n\nsiddhiManager.shutdown()\n\n\n\n\nInstallation\n\n\nPySiddhi can be installed as a Python Library from Source or can be download the python wheel using pip \n\n\nRefer \nBuild and Instaling from source\n for installation prerequisites and other details. \n\n\nInstalling PySiddhi4 from binary\n\n\npip install pysiddhi4", 
            "title": "About"
        }, 
        {
            "location": "/#welcome-to-pysiddhi", 
            "text": "Siddhi is a java library that listens to events from data streams, detects complex conditions described via a  Streaming SQL language , and triggers actions. It performs both  Stream Processing  and  Complex Event Processing .  The Siddhi Library is originally written in Java 8.0.  PySiddhi  is a Python wrapper on Siddhi Java Library.   Siddhi 4 is wrapped by PySiddhi4.   PySiddhi4 includes a REST Client for WSO2 Stream Processor(SP) 4.x.x.  Note: PySiddhi API is initiated by a project for Google Summer of Code 2017 Program.", 
            "title": "Welcome to PySiddhi ."
        }, 
        {
            "location": "/#content", 
            "text": "Introduction (this page)  Installation Guide  Full Quick Demo  For Siddhi 4  For WSO2 SP 4    Using Siddhi from Python  WSO2 Stream Processor 4 REST Client  Siddhi App Management using Python Client  Using Event Simulator    Debugging Siddhi Queries", 
            "title": "Content"
        }, 
        {
            "location": "/#quick-demo", 
            "text": "Following is a quick demo of how to use PySiddhi4. For comprehensive demo please refer to  this link  Step 1  - Define filter using Siddhi Query  siddhiManager = SiddhiManager()\n# Siddhi Query to filter events with volume less than 150 as output\nsiddhiApp =  define stream cseEventStream (symbol string, price float, volume long);   + \\ @info(name = 'query1') from cseEventStream[volume   150] select symbol,price insert into outputStream; \n\n# Generate runtime\nsiddhiAppRuntime = siddhiManager.createSiddhiAppRuntime(siddhiApp)  For more details on Siddhi Query Language, refer  Siddhi Query Language Guide  in WSO2 Docs.  Step 2  - Define a listener for filtered events.  # Add listener to capture output events\nclass QueryCallbackImpl(QueryCallback):\n    def receive(self, timestamp, inEvents, outEvents):\n        PrintEvent(timestamp, inEvents, outEvents)\nsiddhiAppRuntime.addCallback( query1 ,QueryCallbackImpl())  Step 3  - Test filter using sample input events  # Retrieving input handler to push events into Siddhi\ninputHandler = siddhiAppRuntime.getInputHandler( cseEventStream )\n\n# Starting event processing\nsiddhiAppRuntime.start()\n\n# Sending events to Siddhi\ninputHandler.send([ IBM ,700.0,LongType(100)])\ninputHandler.send([ WSO2 , 60.5, LongType(200)])\ninputHandler.send([ GOOG , 50, LongType(30)])\ninputHandler.send([ IBM , 76.6, LongType(400)])\ninputHandler.send([ WSO2 , 45.6, LongType(50)])\n\n# Wait for response\nsleep(0.1)  Output  The 3 events with volume less than 150 are printed in log.  INFO  EventPrinter - Events{ @timestamp = 1497708406678, inEvents = [Event{timestamp=1497708406678, id=-1, data=[IBM, 700.0], isExpired=false}], RemoveEvents = null }\nINFO  EventPrinter - Events{ @timestamp = 1497708406685, inEvents = [Event{timestamp=1497708406685, id=-1, data=[GOOG, 50], isExpired=false}], RemoveEvents = null }\nINFO  EventPrinter - Events{ @timestamp = 1497708406687, inEvents = [Event{timestamp=1497708406687, id=-1, data=[WSO2, 45.6], isExpired=false}], RemoveEvents = null }  Clean Up  - Remember to shutdown the Siddhi Manager when your done.  siddhiManager.shutdown()", 
            "title": "Quick Demo"
        }, 
        {
            "location": "/#installation", 
            "text": "PySiddhi can be installed as a Python Library from Source or can be download the python wheel using pip   Refer  Build and Instaling from source  for installation prerequisites and other details.", 
            "title": "Installation"
        }, 
        {
            "location": "/#installing-pysiddhi4-from-binary", 
            "text": "pip install pysiddhi4", 
            "title": "Installing PySiddhi4 from binary"
        }, 
        {
            "location": "/license/", 
            "text": "Copyright (c) 2018 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \nLicense\n shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \nLicensor\n shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \nLegal Entity\n shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \ncontrol\n means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \nSource\n form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \nObject\n form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \nWork\n shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \nDerivative Works\n shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \nContribution\n shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \nsubmitted\n\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \nNot a Contribution.\n\n\n   \nContributor\n shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \nNOTICE\n text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }, 
        {
            "location": "/Installation-Guide/", 
            "text": "Build and instaling PySiddhi4 from source\n\n\nPrerequisites\n\n\nThe current version is tested with Microsoft Windows and Unix/Linux based operating systems. \n\n\nThe following dependencies should be installed prior to installation of library.\n\n\n\n\n\n\nLinux\n\n\n\n\nPython 2.7 or 3.x\n\n\nCython (\nsudo pip install cython\n)\n\n\nPython Developer Package (\nsudo apt-get install python-dev python3-dev python-dev\n)\n\n\nlibboost for Python (\nsudo apt-get install libboost-python-dev\n)\n\n\nMaven and Java 8\n\n\ng++ and other development tools\n    (\nsudo apt-get install build-essential g++ autotools-dev libicu-dev build-essential libbz2-dev libboost-all-dev\n)\n\n\n\n\n\n\n\n\nmacOS\n\n\n\n\nInstall brew\n\n\nInstall python using brew\n\n\nCython (\nsudo pip install cython\n)\n\n\nboost for python (\nbrew install boost\n)\n\n\n\n\n\n\n\n\nWindows\n\n\n\n\nInstall Python \n\n\nInstall Visual Studio Build tools\n\n\nCython (\nsudo pip install cython\n)\n\n\nMaven and Java 8\n\n\n\n\n\n\n\n\nDownload siddhi-sdk release from \nhere\n and set the SIDDHISDK_HOME as a           environment variable(\nexport SIDDHISDK_HOME=\"\npath-to-siddhi-sdk\n\"\n)\n\n\n\n\nFor use of WSO2 SP 4.x.x Client functionality, it is required to have a WSO2 SP 4.x.x worker instance up and running.\n    (Refer \nRunning the Tests\n section for installation details)\n\n\nDownload siddhi-python-api-proxy-4-1.0.0.jar from \nhere\n and copy to \nSIDDHISDK_HOME\n/lib\n directory\n\n\n\n\nInstall PySiddhi4 from Online Code\n\n\nUsing the following PIP command, PySiddhi4 can be directly installed from online code available in GitHub.\n\n\npip install git+https://github.com/wso2/PySiddhi.git\n\n\n\n\nNote: In case of permission errors, use \nsudo\n\n\nInstall from Downloaded Code\n\n\nSwitch to the branch \nmaster\n for PySiddhi4.\n\n\nNavigate to source code root and execute the following PIP command.\n\n\npip install .\n\n\n\n\nNote the period (.) at end of command. In case of permission errors, use \nsudo\n\n\nUninstall\n\n\nIf the library has been installed as explained above, it could be uninstalled using the following pip command.\n\n\npip uninstall pysiddhi4", 
            "title": "Installation-Guide"
        }, 
        {
            "location": "/Installation-Guide/#build-and-instaling-pysiddhi4-from-source", 
            "text": "", 
            "title": "Build and instaling PySiddhi4 from source"
        }, 
        {
            "location": "/Installation-Guide/#prerequisites", 
            "text": "The current version is tested with Microsoft Windows and Unix/Linux based operating systems.   The following dependencies should be installed prior to installation of library.    Linux   Python 2.7 or 3.x  Cython ( sudo pip install cython )  Python Developer Package ( sudo apt-get install python-dev python3-dev python-dev )  libboost for Python ( sudo apt-get install libboost-python-dev )  Maven and Java 8  g++ and other development tools\n    ( sudo apt-get install build-essential g++ autotools-dev libicu-dev build-essential libbz2-dev libboost-all-dev )     macOS   Install brew  Install python using brew  Cython ( sudo pip install cython )  boost for python ( brew install boost )     Windows   Install Python   Install Visual Studio Build tools  Cython ( sudo pip install cython )  Maven and Java 8     Download siddhi-sdk release from  here  and set the SIDDHISDK_HOME as a           environment variable( export SIDDHISDK_HOME=\" path-to-siddhi-sdk \" )   For use of WSO2 SP 4.x.x Client functionality, it is required to have a WSO2 SP 4.x.x worker instance up and running.\n    (Refer  Running the Tests  section for installation details)  Download siddhi-python-api-proxy-4-1.0.0.jar from  here  and copy to  SIDDHISDK_HOME /lib  directory", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/Installation-Guide/#install-pysiddhi4-from-online-code", 
            "text": "Using the following PIP command, PySiddhi4 can be directly installed from online code available in GitHub.  pip install git+https://github.com/wso2/PySiddhi.git  Note: In case of permission errors, use  sudo", 
            "title": "Install PySiddhi4 from Online Code"
        }, 
        {
            "location": "/Installation-Guide/#install-from-downloaded-code", 
            "text": "Switch to the branch  master  for PySiddhi4.  Navigate to source code root and execute the following PIP command.  pip install .  Note the period (.) at end of command. In case of permission errors, use  sudo", 
            "title": "Install from Downloaded Code"
        }, 
        {
            "location": "/Installation-Guide/#uninstall", 
            "text": "If the library has been installed as explained above, it could be uninstalled using the following pip command.  pip uninstall pysiddhi4", 
            "title": "Uninstall"
        }, 
        {
            "location": "/Quick-Demo-(PySiddhi4)/", 
            "text": "The following example demonstrates a streaming events filter to detect stock records with volume less than 150. This code is written using Siddhi 4.0 via PySiddhi4.\n\n\nfrom PySiddhi4.DataTypes.LongType import LongType\nfrom PySiddhi4.core.SiddhiManager import SiddhiManager\nfrom PySiddhi4.core.query.output.callback.QueryCallback import QueryCallback\nfrom PySiddhi4.core.util.EventPrinter import PrintEvent\nfrom time import sleep\n\nsiddhiManager = SiddhiManager()\n# Siddhi Query to filter events with volume less than 150 as output\nsiddhiApp = \ndefine stream cseEventStream (symbol string, price float, volume long); \n + \\\n\n@info(name = 'query1') from cseEventStream[volume \n 150] select symbol,price insert into outputStream;\n\n\n# Generate runtime\nsiddhiAppRuntime = siddhiManager.createSiddhiAppRuntime(siddhiApp)\n\n# Add listener to capture output events\nclass QueryCallbackImpl(QueryCallback):\n    def receive(self, timestamp, inEvents, outEvents):\n        PrintEvent(timestamp, inEvents, outEvents)\nsiddhiAppRuntime.addCallback(\nquery1\n,QueryCallbackImpl())\n\n# Retrieving input handler to push events into Siddhi\ninputHandler = siddhiAppRuntime.getInputHandler(\ncseEventStream\n)\n\n# Starting event processing\nsiddhiAppRuntime.start()\n\n# Sending events to Siddhi\ninputHandler.send([\nIBM\n,700.0,LongType(100)])\ninputHandler.send([\nWSO2\n, 60.5, LongType(200)])\ninputHandler.send([\nGOOG\n, 50, LongType(30)])\ninputHandler.send([\nIBM\n, 76.6, LongType(400)])\ninputHandler.send([\nWSO2\n, 45.6, LongType(50)])\n\n# Wait for response\nsleep(0.1)\n\n\n\n\n\nAbove example is comprehensively described bellow.\n\n\nInitialization\n \n\n\n\n\nInitialize the Library and Imports\n\n\n\n\nAdd \nthis file\n to working directory in order to enable log4j logging. Log4j is used by PrintEvent to generate output.\n\n\nfrom PySiddhi4.DataTypes.LongType import LongType\nfrom PySiddhi4.core.SiddhiManager import SiddhiManager\nfrom PySiddhi4.core.query.output.callback.QueryCallback import QueryCallback\nfrom PySiddhi4.core.util.EventPrinter import PrintEvent\nfrom time import sleep\n\n\n\n\nStep 1\n - Define filter using Siddhi Query\n\n\nsiddhiManager = SiddhiManager()\n# Siddhi Query to filter events with volume less than 150 as output\nsiddhiApp = \ndefine stream cseEventStream (symbol string, price float, volume long); \n + \\\n\n@info(name = 'query1') from cseEventStream[volume \n 150] select symbol,price insert into outputStream;\n\n\n# Generate runtime\nsiddhiAppRuntime = siddhiManager.createSiddhiAppRuntime(siddhiApp)\n\n\n\n\nFor more details on Siddhi Query Language, refer \nSiddhi Query Language Guide\n in WSO2 Docs.\n\n\nStep 2\n - Define a listener for filtered events.\n\n\n# Add listener to capture output events\nclass QueryCallbackImpl(QueryCallback):\n    def receive(self, timestamp, inEvents, outEvents):\n        PrintEvent(timestamp, inEvents, outEvents)\nsiddhiAppRuntime.addCallback(\nquery1\n,QueryCallbackImpl())\n\n\n\n\nStep 3\n - Test filter using sample input events\n\n\n# Retrieving input handler to push events into Siddhi\ninputHandler = siddhiAppRuntime.getInputHandler(\ncseEventStream\n)\n\n# Starting event processing\nsiddhiAppRuntime.start()\n\n# Sending events to Siddhi\ninputHandler.send([\nIBM\n,700.0,LongType(100)])\ninputHandler.send([\nWSO2\n, 60.5, LongType(200)])\ninputHandler.send([\nGOOG\n, 50, LongType(30)])\ninputHandler.send([\nIBM\n, 76.6, LongType(400)])\ninputHandler.send([\nWSO2\n, 45.6, LongType(50)])\n\n# Wait for response\nsleep(0.1)\n\n\n\n\nOutput\n\n\nThe 3 events with volume less than 150 are printed in log.\n\n\nINFO  EventPrinter - Events{ @timestamp = 1497708406678, inEvents = [Event{timestamp=1497708406678, id=-1, data=[IBM, 700.0], isExpired=false}], RemoveEvents = null }\nINFO  EventPrinter - Events{ @timestamp = 1497708406685, inEvents = [Event{timestamp=1497708406685, id=-1, data=[GOOG, 50], isExpired=false}], RemoveEvents = null }\nINFO  EventPrinter - Events{ @timestamp = 1497708406687, inEvents = [Event{timestamp=1497708406687, id=-1, data=[WSO2, 45.6], isExpired=false}], RemoveEvents = null }\n\n\n\n\nClean Up\n - Remember to shutdown the Siddhi Manager when your done.\n\n\nsiddhiManager.shutdown()", 
            "title": "For Siddhi 4"
        }, 
        {
            "location": "/Quick-Demo-(SP4)/", 
            "text": "The following is a demo code on Siddhi App Management using PySiddhi4 SP Client. This code retrieves the list of Siddhi Apps published in WSO2 SP 4.0.\n\n\nStep 1\n \n\n\n\n\nObtain WSO2 SP 4.x.x binary distribution from \nhere\n.\n\n\nExtract \nwso2sp-4.x.x.zip\n to a suitable location (say \nSP_HOME\n).\n\n\nNavigate to \nSP_Home/bin/\n and run \nsh worker.sh\n.\n\n\n\n\nStep 2\n - Load Python Imports.\n\n\nfrom PySiddhi4.sp.SPClient import SPClient\n\n\n\n\nStep 3\n - Connect to WSO2 SP 4.x.x via REST API and obtain SiddhiApp Management Client.\n\n\nspPythonClient = SPClient('http://localhost:9090')\nsiddhiAppManagementClient = spPythonClient.getSiddhiAppManagementClient()\n\n\n\n\nStep 4\n - Obtain list of Siddhi Apps published in WSO2 DAS.\n\n\nprint(siddhiAppManagementClient.listSiddhiApps())\n\n\n\n\nReceive Outputs\n\n\n['TestSiddhiApp']\n\n\n\n\nCleanup\n - Stop WSO2 SP 4.x.x by sending Ctrl+C to terminal window running worker.sh. This would shutdown the SP server", 
            "title": "For Stream Processor 4"
        }, 
        {
            "location": "/Using-Siddhi-from-Python/", 
            "text": "Key Points\n\n\nThe PySiddhi API is a wrapper on Siddhi Java Library, exposing it's core features to Python.  It is important to keep following points in mind when using PySiddhi API.\n\n\n\n\nIt is a wrapper. Not a port.\n - Whenever you use the PySiddhi API, the \nSiddhi Java Library\n is loaded in background using Java Virtual Machine.\n\n\nThe wrapper is focused on functionality provided by \nsiddhi-core\n which is found in package \norg.wso2.siddhi.core\n. The future versions of API may have the ability to load Siddhi Extesions directly from Java Packages and use them in Siddhi Queries. However, the individual Java classes of extensions will not be wrapped. \n\n\nOnly the classes that are required for API users will be wrapped.\n  Classes which are designed to be used by Siddhi Java Library for its internal work will not be wrapped. \n\n\nPython doesn't differentiate \nInteger\n from \nLong\n. But Siddhi do.\n Python 3 does not differentiate \nInteger\n and \nLong\n Data Types. All Python \nIntegers\n fed into Siddhi (via \nInputHandler\n) are converted into Java \nIntegers\n. To feed Java \nLong\n to Siddhi (via \nInputHandler\n), use \nDataTypes.LongType\n. All \nLong\n outputs received from Siddhi (via callbacks) will also be converted to \nDataTypes.LongType\n.\n\n\nExample: \ninputHandler.send([\"IBM\",700.0,LongType(100)])\n\n\nClean up everything when you are done.\n Remember to call \nshutdown\n of \nSiddhiManager\n and \nSiddhiExecutionPlanRuntime\n (or \nSiddhiAppRuntime\n).\n\n\n\n\nPython Mappings for Siddhi 4\n\n\nThe wrapper is focused on functionality provided by \nsiddhi-core\n. The classes in Java package \norg.wso2.siddhi.core\n are mapped to \nPySiddhi4.core\n using hand written logic. This is not an auto-generated wrapper. The follow table demonstrates major mappings of wrapper.\n\n\n\n\n\n\n\n\nJava Class\n\n\nPython Import\n\n\n\n\n\n\n\n\n\n\norg.wso2.siddhi.core.SiddhiManager\n\n\nfrom PySiddhi4.core.SiddhiManager import SiddhiManager\n\n\n\n\n\n\norg.wso2.siddhi.core.ExecutionPlanRuntime\n\n\nfrom PySiddhi4.core.SiddhiAppRuntime import SiddhiAppRuntime\n\n\n\n\n\n\norg.wso2.siddhi.core.event.Event\n\n\nfrom PySiddhi4.core.event.Event import Event\n\n\n\n\n\n\norg.wso2.siddhi.core.event.ComplexEvent\n\n\nfrom PySiddhi4.core.event.ComplexEvent import ComplexEvent\n\n\n\n\n\n\norg.wso2.siddhi.core.stream.input.InputHandler\n\n\nfrom PySiddhi4.core.stream.input.InputHandler import InputHandler\n\n\n\n\n\n\norg.wso2.siddhi.core.stream.output.StreamCallback\n\n\nfrom PySiddhi4.core.stream.output.StreamCallback import StreamCallback\n\n\n\n\n\n\norg.wso2.siddhi.core.query.output.callback.QueryCallback\n\n\nfrom PySiddhi4.core.query.output.callback.QueryCallback import QueryCallback\n\n\n\n\n\n\norg.wso2.siddhi.core.debugger.SiddhiDebugger\n\n\nfrom PySiddhi4.core.debugger.SiddhiDebugger import SiddhiDebugger\n\n\n\n\n\n\norg.wso2.siddhi.core.debugger.SiddhiDebuggerCallback\n\n\nfrom PySiddhi4.core.debugger.SiddhiDebuggerCallback import SiddhiDebuggerCallback\n\n\n\n\n\n\norg.wso2.siddhi.core.util.EventPrinter\n\n\nimport PySiddhi4.core.util.EventPrinter", 
            "title": "Using Siddhi from Python"
        }, 
        {
            "location": "/Using-Siddhi-from-Python/#key-points", 
            "text": "The PySiddhi API is a wrapper on Siddhi Java Library, exposing it's core features to Python.  It is important to keep following points in mind when using PySiddhi API.   It is a wrapper. Not a port.  - Whenever you use the PySiddhi API, the  Siddhi Java Library  is loaded in background using Java Virtual Machine.  The wrapper is focused on functionality provided by  siddhi-core  which is found in package  org.wso2.siddhi.core . The future versions of API may have the ability to load Siddhi Extesions directly from Java Packages and use them in Siddhi Queries. However, the individual Java classes of extensions will not be wrapped.   Only the classes that are required for API users will be wrapped.   Classes which are designed to be used by Siddhi Java Library for its internal work will not be wrapped.   Python doesn't differentiate  Integer  from  Long . But Siddhi do.  Python 3 does not differentiate  Integer  and  Long  Data Types. All Python  Integers  fed into Siddhi (via  InputHandler ) are converted into Java  Integers . To feed Java  Long  to Siddhi (via  InputHandler ), use  DataTypes.LongType . All  Long  outputs received from Siddhi (via callbacks) will also be converted to  DataTypes.LongType .  Example:  inputHandler.send([\"IBM\",700.0,LongType(100)])  Clean up everything when you are done.  Remember to call  shutdown  of  SiddhiManager  and  SiddhiExecutionPlanRuntime  (or  SiddhiAppRuntime ).", 
            "title": "Key Points"
        }, 
        {
            "location": "/Using-Siddhi-from-Python/#python-mappings-for-siddhi-4", 
            "text": "The wrapper is focused on functionality provided by  siddhi-core . The classes in Java package  org.wso2.siddhi.core  are mapped to  PySiddhi4.core  using hand written logic. This is not an auto-generated wrapper. The follow table demonstrates major mappings of wrapper.     Java Class  Python Import      org.wso2.siddhi.core.SiddhiManager  from PySiddhi4.core.SiddhiManager import SiddhiManager    org.wso2.siddhi.core.ExecutionPlanRuntime  from PySiddhi4.core.SiddhiAppRuntime import SiddhiAppRuntime    org.wso2.siddhi.core.event.Event  from PySiddhi4.core.event.Event import Event    org.wso2.siddhi.core.event.ComplexEvent  from PySiddhi4.core.event.ComplexEvent import ComplexEvent    org.wso2.siddhi.core.stream.input.InputHandler  from PySiddhi4.core.stream.input.InputHandler import InputHandler    org.wso2.siddhi.core.stream.output.StreamCallback  from PySiddhi4.core.stream.output.StreamCallback import StreamCallback    org.wso2.siddhi.core.query.output.callback.QueryCallback  from PySiddhi4.core.query.output.callback.QueryCallback import QueryCallback    org.wso2.siddhi.core.debugger.SiddhiDebugger  from PySiddhi4.core.debugger.SiddhiDebugger import SiddhiDebugger    org.wso2.siddhi.core.debugger.SiddhiDebuggerCallback  from PySiddhi4.core.debugger.SiddhiDebuggerCallback import SiddhiDebuggerCallback    org.wso2.siddhi.core.util.EventPrinter  import PySiddhi4.core.util.EventPrinter", 
            "title": "Python Mappings for Siddhi 4"
        }, 
        {
            "location": "/Siddhi-App-Management-of-WSO2-SP-4/", 
            "text": "Using \nWSO2 SP Client\n in \nPySiddhi4\n, following operations can be undertaken on \nSiddhi App Management\n of \nWSO2 SP 4.0\n.\n\n List all Siddhi Apps.\n\n Retrieve Siddhi App using name.\n\n Retrieve Status of Siddhi App.\n\n Save a new Siddhi App in SP.\n\n Update a Siddhi App stored in SP.\n\n Delete a Siddhi App stored in SP.\n\n\nPre-requisites\n\n\n\n\nInstall \nPySiddhi4\n by following \nInstallation Guide\n.\n\n\nWSO2 SP 4.0 must be already installed and running. If not, follow the steps below.\n\n\nObtain WSO2 SP 4.x.x binary distribution from https://github.com/wso2/product-sp/releases.\n\n\nExtract \nwso2sp-4.x.x.zip\n to a suitable location (say \nSP_HOME\n).\n\n\nNavigate to \nSP_Home/bin/\n and run \nsh worker.sh\n.\n\n\n\n\nList all Siddhi Apps\n\n\nfrom PySiddhi4.sp.SPClient import SPClient\n\nspPythonClient = SPClient('http://localhost:9090') # host URL of SP\nsiddhiAppManagementClient = spPythonClient.getSiddhiAppManagementClient()\n\nprint(siddhiAppManagementClient.listSiddhiApps()) # prints a list of siddhi apps\n\n\n\n\nRetrieve Siddhi App using Name\n\n\nfrom PySiddhi4.sp.SPClient import SPClient\nspPythonClient = SPClient('http://localhost:9090') # host URL of SP\nsiddhiAppManagementClient = spPythonClient.getSiddhiAppManagementClient()\n\napp = siddhiAppManagementClient.retrieveSiddhiApp(\nTestSiddhiApp\n, username=admin, password=admin)\nprint(app)\n\n\n\n\nRetrieve Siddhi App Status\n\n\nfrom PySiddhi4.sp.SPClient import SPClient\nspPythonClient = SPClient('http://localhost:9090') # host URL of SP\nsiddhiAppManagementClient = spPythonClient.getSiddhiAppManagementClient()\n\nstatus = siddhiAppManagementClient.retrieveStatusSiddhiApp(\nTestSiddhiApp\n, username=admin, password=admin)\nprint (status) # prints status of siddhi app (active)\n\n\n\n\nSave new Siddhi App\n\n\nfrom PySiddhi4.sp.SPClient import SPClient\n\nspPythonClient = SPClient('http://localhost:9090') # host URL of SP\nsiddhiAppManagementClient = spPythonClient.getSiddhiAppManagementClient()\n\nsiddhiApp = \n@App:name('TestSiddhiApp1') \n \n                \ndefine stream FooStream(symbol string, price float, volume long); \n \n                \n@source(type='inMemory', topic='symbol', @map(type='passThrough')) \n \n                \ndefine stream BarStream(symbol string, price float, volume long); \n\n                \nfrom FooStream select symbol, price, volume insert into BarStream; \n\n\nif siddhiAppManagementClient.saveSiddhiApp(siddhiApp, username=admin, password=admin):\n    print(\nSuccessfully saved!\n)\n\n\n\n\nUpdate a saved Siddhi App\n\n\nfrom PySiddhi4.sp.SPClient import SPClient\nfrom PySiddhi4.sp.SiddhiAppManagement.SiddhiAppManagementClient import UpdateAppStatusResponse\n\nspPythonClient = SPClient('http://localhost:9090') # Host URL of SP\nsiddhiAppManagementClient = spPythonClient.getSiddhiAppManagementClient()\n\nsiddhiApp = \n@App:name('TestSiddhiApp1') \n \n                \ndefine stream FooStream (symbol string, price float, volume long); \n \n                \n@source(type='inMemory', topic='symbol', @map(type='passThrough')) \n \n                \ndefine stream BarStream (symbol string, price float, volume long); \n \n                \nfrom FooStream select symbol, price, volume insert into BarStream; \n\n\nresult = siddhiAppManagementClient.updateSiddhiApp(siddhiApp, username=admin, password=admin)\nif result.name == UpdateAppStatusResponse.savedNew.name:\n    print(\nSaved new Siddhi App\n)\nelif result.name == UpdateAppStatusResponse.updated.name:\n    print(\nUpdated saved Siddhi App\n)\n\n\n\n\nDelete a Siddhi App\n\n\nfrom PySiddhi4.sp.SPClient import SPClient\n\nspPythonClient = SPClient('http://localhost:9090') # host URL of SP\nsiddhiAppManagementClient = spPythonClient.getSiddhiAppManagementClient()\n\nsiddhiAppManagementClient.deleteSiddhiApp(\nTestSiddhiApp1\n, username=admin, password=admin) # returns True if successfully deleted", 
            "title": "Siddhi App Management using Python Client"
        }, 
        {
            "location": "/Siddhi-App-Management-of-WSO2-SP-4/#pre-requisites", 
            "text": "Install  PySiddhi4  by following  Installation Guide .  WSO2 SP 4.0 must be already installed and running. If not, follow the steps below.  Obtain WSO2 SP 4.x.x binary distribution from https://github.com/wso2/product-sp/releases.  Extract  wso2sp-4.x.x.zip  to a suitable location (say  SP_HOME ).  Navigate to  SP_Home/bin/  and run  sh worker.sh .", 
            "title": "Pre-requisites"
        }, 
        {
            "location": "/Siddhi-App-Management-of-WSO2-SP-4/#list-all-siddhi-apps", 
            "text": "from PySiddhi4.sp.SPClient import SPClient\n\nspPythonClient = SPClient('http://localhost:9090') # host URL of SP\nsiddhiAppManagementClient = spPythonClient.getSiddhiAppManagementClient()\n\nprint(siddhiAppManagementClient.listSiddhiApps()) # prints a list of siddhi apps", 
            "title": "List all Siddhi Apps"
        }, 
        {
            "location": "/Siddhi-App-Management-of-WSO2-SP-4/#retrieve-siddhi-app-using-name", 
            "text": "from PySiddhi4.sp.SPClient import SPClient\nspPythonClient = SPClient('http://localhost:9090') # host URL of SP\nsiddhiAppManagementClient = spPythonClient.getSiddhiAppManagementClient()\n\napp = siddhiAppManagementClient.retrieveSiddhiApp( TestSiddhiApp , username=admin, password=admin)\nprint(app)", 
            "title": "Retrieve Siddhi App using Name"
        }, 
        {
            "location": "/Siddhi-App-Management-of-WSO2-SP-4/#retrieve-siddhi-app-status", 
            "text": "from PySiddhi4.sp.SPClient import SPClient\nspPythonClient = SPClient('http://localhost:9090') # host URL of SP\nsiddhiAppManagementClient = spPythonClient.getSiddhiAppManagementClient()\n\nstatus = siddhiAppManagementClient.retrieveStatusSiddhiApp( TestSiddhiApp , username=admin, password=admin)\nprint (status) # prints status of siddhi app (active)", 
            "title": "Retrieve Siddhi App Status"
        }, 
        {
            "location": "/Siddhi-App-Management-of-WSO2-SP-4/#save-new-siddhi-app", 
            "text": "from PySiddhi4.sp.SPClient import SPClient\n\nspPythonClient = SPClient('http://localhost:9090') # host URL of SP\nsiddhiAppManagementClient = spPythonClient.getSiddhiAppManagementClient()\n\nsiddhiApp =  @App:name('TestSiddhiApp1')   \n                 define stream FooStream(symbol string, price float, volume long);   \n                 @source(type='inMemory', topic='symbol', @map(type='passThrough'))   \n                 define stream BarStream(symbol string, price float, volume long);  \n                 from FooStream select symbol, price, volume insert into BarStream;  \n\nif siddhiAppManagementClient.saveSiddhiApp(siddhiApp, username=admin, password=admin):\n    print( Successfully saved! )", 
            "title": "Save new Siddhi App"
        }, 
        {
            "location": "/Siddhi-App-Management-of-WSO2-SP-4/#update-a-saved-siddhi-app", 
            "text": "from PySiddhi4.sp.SPClient import SPClient\nfrom PySiddhi4.sp.SiddhiAppManagement.SiddhiAppManagementClient import UpdateAppStatusResponse\n\nspPythonClient = SPClient('http://localhost:9090') # Host URL of SP\nsiddhiAppManagementClient = spPythonClient.getSiddhiAppManagementClient()\n\nsiddhiApp =  @App:name('TestSiddhiApp1')   \n                 define stream FooStream (symbol string, price float, volume long);   \n                 @source(type='inMemory', topic='symbol', @map(type='passThrough'))   \n                 define stream BarStream (symbol string, price float, volume long);   \n                 from FooStream select symbol, price, volume insert into BarStream;  \n\nresult = siddhiAppManagementClient.updateSiddhiApp(siddhiApp, username=admin, password=admin)\nif result.name == UpdateAppStatusResponse.savedNew.name:\n    print( Saved new Siddhi App )\nelif result.name == UpdateAppStatusResponse.updated.name:\n    print( Updated saved Siddhi App )", 
            "title": "Update a saved Siddhi App"
        }, 
        {
            "location": "/Siddhi-App-Management-of-WSO2-SP-4/#delete-a-siddhi-app", 
            "text": "from PySiddhi4.sp.SPClient import SPClient\n\nspPythonClient = SPClient('http://localhost:9090') # host URL of SP\nsiddhiAppManagementClient = spPythonClient.getSiddhiAppManagementClient()\n\nsiddhiAppManagementClient.deleteSiddhiApp( TestSiddhiApp1 , username=admin, password=admin) # returns True if successfully deleted", 
            "title": "Delete a Siddhi App"
        }, 
        {
            "location": "/Event-Simulator-of-SP-4/", 
            "text": "Following operations are supported by WSO2 Stream Processor 4 Event Simulator Client of PySiddhi4.\n\n\n\n\nSingle Simulations\n\n\nSaving a simulation configuration\n\n\nEditing a simulation configuration\n\n\nDeleting a simulation configuration\n\n\nRetrieving a simulation configuration\n\n\nUploading a CSV file\n\n\nEditing and uploaded CSV file\n\n\nDeleting an uploaded CSV file\n\n\nPausing an event simulation\n\n\nResuming an event simulation\n\n\nStopping an event simulation\n\n\n\n\nRefer \nDocumentation of WSO2 SP 4.0 Event simulator REST API\n for more details.\n\n\nPre-requisites\n\n\n\n\nInstall \nPySiddhi4\n by following \nInstallation Guide\n.\n\n\nWSO2 SP 4.0 must be already installed and running. If not, follow the steps below.\n\n\nObtain WSO2 SP 4.x.x binary distribution from https://github.com/wso2/product-sp/releases.\n\n\nExtract \nwso2sp-4.x.x.zip\n to a suitable location (say \nSP_HOME\n).\n\n\nNavigate to \nSP_Home/bin/\n and run \nsh worker.sh\n.\n\n\n\n\nSingle Simulations\n\n\nfrom PySiddhi4.sp.SPClient import SPClient\nfrom PySiddhi4.sp.EventSimulator.SingleSimulationConfiguration import SingleSimulationConfiguration\n\nspPythonClient = SPClient('http://localhost:9090') # host URL of SP\neventSimulatorClient = spPythonClient.getEventSimulatorClient()\n\nsingleSimulationConfiguration = SingleSimulationConfiguration(\nTestSiddhiApp\n,\nFooStream\n,[None, 9, 45])\n\nif eventSimulatorClient.simulateSingleEvent(singleSimulationConfiguration, username=\nadmin\n, password=\nadmin\n):\n    logging.info(\nSuccessfully Simulated Single Event\n)\n\n\n\n\nSaving a Simulation Configuration (Feed Simulation Configuration)\n\n\nfrom PySiddhi4.sp.SPClient import SPClient\nfrom PySiddhi4.sp.EventSimulator.AttributeConfiguration import AttributeConfiguration\nfrom PySiddhi4.sp.EventSimulator.FeedSimulationConfiguration import FeedSimulationConfiguration\nfrom PySiddhi4.sp.EventSimulator.SimulationSource import SimulationSource\n\nspPythonClient = SPClient('http://localhost:9090') # host URL of SP\neventSimulatorClient = spPythonClient.getEventSimulatorClient()\n\nsvr = FeedSimulationConfiguration(\nsimulationPrimitive\n)\nsvr.properties.timestampStartTime = 1488615136958\nsvr.properties.timestampEndTime = None\nsvr.properties.noOfEvents = 8\nsvr.properties.timeInterval = 1000\n\nsm1 = SimulationSource(simulationType=SimulationSource.Type.RANDOM_DATA_SIMULATION, streamName=\nFooStream\n, siddhiAppName=\nTestSiddhiApp\n, timestampInterval=5)\n\nsm1.attributeConfiguration.append(AttributeConfiguration(AttributeConfiguration.Type.PRIMITIVE_BASED, length=10))\nsm1.attributeConfiguration.append(AttributeConfiguration(AttributeConfiguration.Type.PRIMITIVE_BASED, min=35000, max=30000, precision=2))\nsm1.attributeConfiguration.append(AttributeConfiguration(AttributeConfiguration.Type.PRIMITIVE_BASED, min=150, max=300))\n\nsvr.sources.append(sm1)\n\nif eventSimulatorClient.saveSimulationFeedConfiguration(svr, username=\nadmin\n, password=\nadmin\n):\n    print(\nSuccessfully Saved Simulation Feed Configuration\n)\n\n\n\n\nFor more examples on Event Simulator, refer \nEventSimulatorTests\n.", 
            "title": "Using Event Simulator"
        }, 
        {
            "location": "/Event-Simulator-of-SP-4/#pre-requisites", 
            "text": "Install  PySiddhi4  by following  Installation Guide .  WSO2 SP 4.0 must be already installed and running. If not, follow the steps below.  Obtain WSO2 SP 4.x.x binary distribution from https://github.com/wso2/product-sp/releases.  Extract  wso2sp-4.x.x.zip  to a suitable location (say  SP_HOME ).  Navigate to  SP_Home/bin/  and run  sh worker.sh .", 
            "title": "Pre-requisites"
        }, 
        {
            "location": "/Event-Simulator-of-SP-4/#single-simulations", 
            "text": "from PySiddhi4.sp.SPClient import SPClient\nfrom PySiddhi4.sp.EventSimulator.SingleSimulationConfiguration import SingleSimulationConfiguration\n\nspPythonClient = SPClient('http://localhost:9090') # host URL of SP\neventSimulatorClient = spPythonClient.getEventSimulatorClient()\n\nsingleSimulationConfiguration = SingleSimulationConfiguration( TestSiddhiApp , FooStream ,[None, 9, 45])\n\nif eventSimulatorClient.simulateSingleEvent(singleSimulationConfiguration, username= admin , password= admin ):\n    logging.info( Successfully Simulated Single Event )", 
            "title": "Single Simulations"
        }, 
        {
            "location": "/Event-Simulator-of-SP-4/#saving-a-simulation-configuration-feed-simulation-configuration", 
            "text": "from PySiddhi4.sp.SPClient import SPClient\nfrom PySiddhi4.sp.EventSimulator.AttributeConfiguration import AttributeConfiguration\nfrom PySiddhi4.sp.EventSimulator.FeedSimulationConfiguration import FeedSimulationConfiguration\nfrom PySiddhi4.sp.EventSimulator.SimulationSource import SimulationSource\n\nspPythonClient = SPClient('http://localhost:9090') # host URL of SP\neventSimulatorClient = spPythonClient.getEventSimulatorClient()\n\nsvr = FeedSimulationConfiguration( simulationPrimitive )\nsvr.properties.timestampStartTime = 1488615136958\nsvr.properties.timestampEndTime = None\nsvr.properties.noOfEvents = 8\nsvr.properties.timeInterval = 1000\n\nsm1 = SimulationSource(simulationType=SimulationSource.Type.RANDOM_DATA_SIMULATION, streamName= FooStream , siddhiAppName= TestSiddhiApp , timestampInterval=5)\n\nsm1.attributeConfiguration.append(AttributeConfiguration(AttributeConfiguration.Type.PRIMITIVE_BASED, length=10))\nsm1.attributeConfiguration.append(AttributeConfiguration(AttributeConfiguration.Type.PRIMITIVE_BASED, min=35000, max=30000, precision=2))\nsm1.attributeConfiguration.append(AttributeConfiguration(AttributeConfiguration.Type.PRIMITIVE_BASED, min=150, max=300))\n\nsvr.sources.append(sm1)\n\nif eventSimulatorClient.saveSimulationFeedConfiguration(svr, username= admin , password= admin ):\n    print( Successfully Saved Simulation Feed Configuration )  For more examples on Event Simulator, refer  EventSimulatorTests .", 
            "title": "Saving a Simulation Configuration (Feed Simulation Configuration)"
        }
    ]
}